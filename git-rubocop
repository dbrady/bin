#!/usr/bin/env ruby
# git-rubocop [options] [--since <count|sha|branch>] - run rubocop on modified files
# see git-modified --help for full args.
require "colorize"
require "optimist"
require_relative "lib/dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli

  def unstaged?
    opts[:unstaged]
  end

  def run
    main_branch = git_parent_or_main_branch # t_command_output("git parent-branch")

    @opts = Optimist.options do
      banner <<~BANNER
        git-rubocop [options] [<additional_files>] - run rubocop on relevant files. Defaults to --since master.

        Note: Files are identified by having committed changes, but rubocop runs on files as current constituted.

        Options:
      BANNER

      opt :debug, "Print extra debug info", default: false
      opt :quiet, "Run with minimal output", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :pretend, "Print commands but do not run them", default: false

      opt :since, "Check all files modified since commit or branch. See `git-files-changed --help` for options. If omitted, checks unstaged changes only.", type: :string, default: main_branch

      opt :rspec, "Include rspec files (omitted by  default)", default: false
      opt :unstaged, "Consider unstaged files even if they have not been committed in the --since range", default: false
      opt :only_pattern, "Pattern to include", short: :o, type: :string, multi: true
      opt :exclude, "Filenames to exclude (fragment)", short: :x, type: :string, multi: true
      opt :exclude_pattern, "Filenames to exclude (regex)", short: :X, type: :string, multi: true

      opt :autocorrect, "Automatically fix correctable issues", short: :a, default: false
      opt :"autocorrect-all", "Automatically fix correctable issues", short: :A, default: false
      opt :"display-style-guide", "Display style guide in offense messages", short: :S, default: true
      opt :"extra-details", "Show extra details in offense messages", short: :E, default: true
      opt :"except", "Exclude the given cop(s)", type: :string
      opt :"only", "Only run the given cop(s)", short: :O, type: :string
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if debug?

    # if no arguments and nothing's going on, use git main as the sha
    changed_files = get_command_output_lines("git files-changed --existing #{opts[:since]}")
    modified_files = get_command_output_lines("git modified") || []

    files = []
    files += changed_files
    files += modified_files if unstaged?
    files += ARGV.dup # re-add ARGV so you can, e.g. exclude *.json, then later add specific json files

    if !unstaged? && !modified_files.empty?
      $stderr.puts "You have unsaged changes present, consider rerunning with -u/--unstaged.".yellow
    end

    files = files.map(&:strip).uniq.sort

    if debug?
      puts "files to consider:"
      puts files.map {|file| "  #{file}"}
    end

    only_patterns = opts[:only_pattern].map {|pattern| Regexp.new(pattern) }

    fragments_to_exclude = opts[:exclude]
    patterns_to_exclude = opts[:exclude_pattern].map {|pattern| Regexp.new(pattern) }

    patterns_to_exclude << %r{^spec/} unless opts[:rspec]
    patterns_to_exclude << %r{\.(slim|haml|yml)$}

    if debug?
      puts "Only patterns to consider (exclude all non-matches):"
      if only_patterns.empty?
        puts "    None"
      else
        puts only_patterns.map {|fragment| "  #{fragment}"}
      end

      puts "Fragments to Exclude:"
      if fragments_to_exclude.empty?
        puts "    None"
      else
        puts fragments_to_exclude.map {|fragment| "  #{fragment}"}
      end

      puts "Patterns to exclude:"
      if patterns_to_exclude.empty?
        puts "    None"
      else
        puts patterns_to_exclude.map {|pattern| "  #{pattern}"}
      end
    end

    if !only_patterns.empty?
      files = files.select {|filename| only_patterns.any? {|pattern| pattern.match(filename) }}
    end

    files = files.reject {|filename| patterns_to_exclude.any? {|pattern| pattern.match(filename) }}
    files = files.reject {|filename| fragments_to_exclude.any? {|fragment| filename.include?(fragment) }}

    # exclude removed files
    files.keep_if {|file| File.exist?(File.expand_path(File.join(".", file))) }

    if verbose? || debug?
      puts "Final files to run rubocop on:"
      puts files.map {|file| "  #{file}"}
    end

    if files.empty?
      puts "No files changed since #{opts[:since]}"
      exit 0
    end

    passthrough_flags = {
      autocorrect: "-a",
      "autocorrect-all": "-A",
      "display-style-guide": "-S",
      "extra-details": "-E",
    }.select { |key, _| opts[key] }.values

    passthrough_options = {
      "except": "--except",
      "only": "--only",
    }.select { |key, _| opts[key] }.map { |key, value| "#{value}=#{opts[key]}" }

    passthrough_args = (passthrough_flags + passthrough_options) * ' '

    # autocorrect_arg = if opts[:autocorrect]
    #                     "-a"
    #                   elsif opts[:"autocorrect-all"]
    #                     "-A"
    #                   else
    #                     ""
    #                   end

    # command = "rubocop #{autocorrect_arg} #{files.join(' ')}".sub('rubocop  ', 'rubocop ')
    command = "rubocop #{passthrough_args} #{files.join(' ')}".sub('rubocop  ', 'rubocop ')

    puts command.cyan
    system command unless opts[:pretend]
  end
end

if __FILE__ == $0
  Application.new.run
else
  puts $0.inspect
end
