#!/usr/bin/env ruby
# dierunnerdie - Hunt down hung rails runner processes and drive stakes through their heart
require "colorize"
require "optimist"
require_relative "lib/dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli


  opt_flag :force, :db

  def run
    @opts = Optimist.options do
      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :force, "After asking spring politely to shut down, get real intense if necessary", default: false
      opt :quiet, "Run with minimal output", default: false
      opt :db, "Kill db:migrate processes as well", default: false

      # TODO: rarely I also have rails server or rails console hang. Add checks here?
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    puts "Checking for running rails runners..."
    puts "rails_is_runnering? #{rails_is_runnering?.inspect}"

    pid_lines = rails_runner_pids
    if !quiet?
      pid_lines.each.with_index(1) {|line, index| puts "#{index}: #{line}" }
    end

    if db? # && db_migrate_is_running?
      puts "Killing db:migrate processes"
      db_migrate_pids.each do |pid|
        puts "#{pid}"
        run_command "kill #{pid}"
      end
    end

    if rails_runner_pids.empty?
      puts "No rails runner pids found."
      exit
    end

    puts "Asking rails runner politely to go quietly into that good night..."
    pids = pid_lines.map {|pid_line| pid_line.split[1] }
    pids.each do |pid|
      run_command "kill #{pid}"
    end

    if force?
      pid_lines = rails_runner_pids
      sleep 5

      puts "Telling rails runner to go, kicking and screaming if necessary..."
      if !quiet?
        pid_lines.each.with_index(1) {|line, index| puts "#{index}: #{line}" }
      end
      pids = pid_lines.map {|pid_line| pid_line.split[1] }
      pids.each do |pid|
        run_command "kill -9 #{pid}"
      end
    end

    sleep 5
    puts "All done."
    puts "rails_is_runnering? #{rails_is_runnering?.inspect}"

    if rails_is_runnering?
      rails_runner_pids.each.with_index {|line, index| puts "#{index}: #{line}"}
    end
  end

  def rails_is_runnering?
    run_command "ps auwx | grep -v diespringdie | grep '[r]ails runner' 2>&1 > /dev/null"
  end

  def rails_runner_pids
    get_command_output_lines("ps auwx | grep '[r]ails runner'").find_all {|line| line.split[10] == "spring" }
  end
end


if __FILE__ == $0
  Application.new.run
end

# echo "Asking spring politely to go quietly into that good night..."
# # TODO: rewrite in ruby and use line.split(/\s+/)[10] to find the exact command name.
# echo -e "\033[36mps auwx | grep [s]pring | ruby -ne 'w=\$_.split(/\s+/); puts w[1] if w[10] == \"spring\"' | while read pid; do echo "pid: $pid"; kill $pid; done\033[0m"
# ps auwx | grep [s]pring | ruby -ne 'w=$_.split(/\s+/); puts w[1] if w[10] == "spring"' | while read pid; do echo "pid: $pid"; kill $pid; done


# echo

# echo "Giving spring a moment to shut itself down..."
# echo -e "\033[36msleep 5\033[0m"
# sleep 5

# echo "Telling the OS to go after spring with a machete..."
# echo -e "\033[36mps auwx | grep [s]pring | ruby -ne 'w=\$_.split(/\s+/); puts w[1] if w[10] == \"spring\"' | while read pid; do echo "pid: $pid"; kill -9 $pid; done\033[0m"
# ps auwx | grep [s]pring | ruby -ne 'w=$_.split(/\s+/); puts w[1] if w[10] == "spring"' | while read pid; do echo "pid: $pid"; kill -9 $pid; done
# echo

# echo "Looking for survivors..."
# ps auwx | grep [s]pring | ruby -ne 'w=$_.split(/\s+/); puts $_ if w[10] == "spring"'
