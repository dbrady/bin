#!/usr/bin/env ruby
# git-new-dependabot-branch <jira_id> <branch_name> <dependabot_branch_name>
#
# git new-dependabot-branch COR-1117 --dependabot-id=160 --library=axios
# => git new-branch COR-1117 dependabot-160-update-axios
# # git branch -a | grep -E 'dependabot.*axios' | if exactly one branch, merge it
# => git merge remotes/origin/npm_and_yarn/axios-1.7.4
require "colorize"
require "optimist"
require_relative "dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli

  opt_flag :auto, :merge

  def dependabot_branch?
    opts[:"dependabot-branch_given"]
  end

  def run
    @opts = Optimist.options do
      banner <<-BANNER
git new-dependabot-branch <jira_id> --library=<library_name> [--dependabot=<dependabot_pr_id>] [--dependabot-branch=<branch_name>]


How To Do It:

1. Start: find your dependabot ticket, e.g. "Nokogiri updates packaged libxml2 to v2.12.7 to resolve CVE-2024-34459 #155"
2. Create a Jira ticket for it
   1. Go to the Dependabot Epic, which is [COR-1116](https://upbd.atlassian.net/browse/COR-1116), and click Create. (If COR-1116 is closed and there are many dependabot tickets, open a new epic if you want.)
   2. Set the Parent to the epic, e.g. COR-1116
   3. Copy the dependabot title as the ticket summary, e.g "Nokogiri updates packaged libxml2 to v2.12.7 to resolve CVE-2024-34459"
   4. For the description, paste in the dependabot url, e.g. `https://github.com/acima-credit/merchant_portal/security/dependabot/155`
   5. If you're going to work the ticket, click Assign to Me.
   6. Set the Investment Category to "Contunuous Development"
   7. Set the team to your team, e.g. COR Red
   8. Set the sprint to your current sprint. You'll get a warning about it affecting scope. If you don't want that, don't do this.
   9. Set the points. Use your own judgment but as a rule of thumb if Dependabot is offering an automatic merge PR I estimate a 1. If Dependabot can't automatically update it, I pick 3. It's a gamble and I don't know until I get into it if it's going to be trivial or a nightmare.
   10. Set the Project Code to ACE-220
   11. Set the Journey Platform to Acima-LTO
   12. Set the Value Stream to Transaction

3. Open the ticket and move it to In Development. Let's say it opened as COR-1160.
4. Check out latest master and git pull it.
5. run `git new-dependabot-branch COR-1160 --dependabot=155 --library=nokogiri --no-merge` which will
   1. Create a new story branch, `dbrady/COR-1160/dependabot-155-update-nokogiri
   2. Fix the problem. `git new-dependabot-branch` will automatically merge a dependabot automerge branch if it finds one (use --no-merge to prevent it from trying). If it's a ruby gem you might be able to just `bundle update <gem>`. If not, you're about to pay back all those cheap 3-point stories because good lock tracking down all the necessary dependencies. Commit your changes.
   3. `git slam` will push it up and open a PR.
6. Get through review and deploy
7. Go back to Dependabot and make sure the vulnerability has been removed from the dashboard. If not, Dismiss it with "a fix has already been started".


Options:
      BANNER
      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :quiet, "Run with minimal output", default: false
      opt :dependabot, "Dependabot ticket id", type: :integer
      opt :library, "Library to update", type: :string, required: true
      opt :"dependabot-branch", "Name of dependabot branch, e.g. remotes/origin/dependabot/npm_and_yarn/braces-1.0.3", short: 'b', type: :string
      opt :auto, "Autorun as much as possible (runs git-slam --auto)", default: false
      opt :merge, "Attempt to merge the dependabot branch (use --no-merge to disable --dependabot-branch)", default: true
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]
    Optimist.die("You must be on the main branch to run this script") unless git_on_main_branch?
    jira_ticket = ARGV.first

    branch_name = "dependabot"
    branch_name += "-#{opts[:dependabot]}" if opts[:dependabot_given]
    branch_name += "-update-#{opts[:library]}"

    puts "Creating branch #{branch_name}"
    run_command! "git new-branch #{jira_ticket} #{branch_name}"

    # git branch -a | grep -E 'remotes/origin/dependabot/.*#{library}' | if exactly one branch, merge it
    remote_branch = dependabot_branch

    if pretend? || (merge? && dependabot_branch)
      run_command! "git merge #{dependabot_branch}"

      run_command! %(git slam --auto --no-details --no-specs --summary="Automated fix suggested by Dependabot for a known security vulnerability in #{opts[:library]}.")
    end
  end

  def dependabot_branch
    @dependabot_branch ||=
      if dependabot_branch?
        opts[:"dependabot-branch"]
      elsif merge?
        branches = get_command_output_lines "git branch -a | grep -E '^\s*remotes/origin/dependabot/.*#{opts[:library]}'"
        if branches.size == 1
          remote_branch = branches.first.strip
          puts "Merging #{remote_branch}"
          remote_branch
        elsif branches.size.zero?
          puts "No branches found for #{opts[:library]}".red
        else
          puts "Multiple branchhes found for #{opts[:library]}:".red
          puts branches
          puts "If the branch you want is in here, rerun with --dependabot-branch=<branch_name>"
        end
      end
  end
end

if __FILE__ == $0
  Application.new.run
end
