#!/usr/bin/env ruby
# highlight-lines <regex> - Like grep -E --color=always except highlight the entire line instead of just the match.
# cat file.txt | highlight-lines "pants"
# highlight-lines "pants" file.txt

require "colorize"
require "optimist"

opts = Optimist.options do
  banner <<HALP
highlight-lines [options] <regex> [<file> [<file2> [...]]]
cat <file> | highlight-lines [options] <regex>
HALP

  opt :debug, "Print extra debug info", default: false
  opt :color, "Color name to use, e.g red, green, light_black", default: "green"
  opt :"ignore-case", "Ignore case", short: :i, default: false
  opt :background, "Set background color", short: :b, default: "normal"
  opt :bold, "Highlight lines in bold", short: :k, default: false
end
puts opts.inspect if opts[:debug]

options = 0
options |= Regexp::IGNORECASE if opts[:"ignore-case"]

regex = Regexp.new(ARGV.shift) # ARGV.first but get rid of it so

color_on = {}
color_off = {}

color_on = { color: :normal }
color_on[:color] = opts[:color].to_sym if opts[:color]
color_on[:mode] = :bold if opts[:bold]
color_on[:background] = opts[:background].to_sym if opts[:background]

color_off = { color: :normal }

ARGF.each_line do |line|
  line.rstrip!
  color_params = (line =~ regex) ? color_on : color_off
  puts color_params.inspect if opts[:debug]
  puts line.colorize(color_params)
end
