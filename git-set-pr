#!/usr/bin/env ruby
# git set-pr <number> - associate PR with current branch
require "colorize"
require "extralite"
require "optimist"

# TODO: Convert from bare sql to Sequel or AR

require_relative "dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli

  # Return true if path contains a .git/ folder or a .git file (specific instance of a submodule)#
  # Duplicate code in git-branch-history and git-log-branch. Is it make-a-git-tools-gem o'clock yet?
  def is_git_repo?(path)
    File.exist?(File.join(path, '.git'))
  end

  # Walk up file tree looking for a .git folder
  # Duplicate code in git-branch-history and git-log-branch. Is it make-a-git-tools-gem o'clock yet?
  def git_repo_for(path)
    starting_path = last_path = path

    while !path.empty?
      return path if is_git_repo?(path)
      last_path, path = path, File.split(path).first
      raise " FIGURE OUT PATH FOR #{starting_path.inspect}" if last_path == path
    end
  end

  DATABASE_PATH = File.expand_path('~/bin/db/git-pr-history.db')

  def db
    @db ||= Extralite::Database.new(DATABASE_PATH)
  end

  def run
    @opts = Optimist.options do
      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :quiet, "Run with minimal output", default: false
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    pr = ARGV.first.to_i
    Optimist::die("Must supply a PR id") unless pr && pr.to_i > 0

    # Associate repo and branch --> pr
    repo = git_repo_for(Dir.pwd)
    current_branch = `git current-branch`.strip

    # BEGIN save to db
    query = "DELETE FROM pr_history WHERE repo='#{repo}' AND branch='#{current_branch}'"
    db.execute query

    now = Time.now.strftime("%F %T")
    query = "INSERT INTO pr_history (repo, branch, pr, created_at, updated_at, deleted_at) VALUES ('#{repo}', '#{current_branch}', #{pr}, '#{now}', '#{now}', NULL)"
    db.execute query
    # END save to db

    puts "Recorded. Branch '#{current_branch}' is PR number #{pr}."

    # Remind me to run rubocop
    rubocop = ' RU'.bold.white.on_blue + 'BOC'.bold.white + 'OP '.bold.white.on_red
    puts "Did you remember to run #{rubocop}?"
  end
end


if __FILE__ == $0
  Application.new.run
end
