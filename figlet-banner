#!/usr/bin/env ruby
# figlet-banner - Write a message to the console in ascii-art fo.nt
#
#
# figlet-banner --font gothic "figlet-banner"
# figlet -w 236 -d ~/bin/figlet-fonts -f gothic "figlet-banner"
#
#    /\          ,,         ,        ,,
#   ||   '   _   ||        ||        ||      _
#  =||= \\  / \\ ||  _-_  =||=       ||/|,  < \, \\/\\ \\/\\  _-_  ,._-_
#   ||  || || || || || \\  ||  <>-<> || ||  /-|| || || || || || \\  ||
#   ||  || || || || ||/    ||        || |' (( || || || || || ||/    ||
#   \\, \\ \\_-| \\ \\,/   \\,       \\/    \/\\ \\ \\ \\ \\ \\,/   \\,
#           /  \
#          '----`
require 'figlet'
require 'io/console'

# TODO: Extract this to a whichos gem; I use it a lot--add `def windows?` and
# call it a day
def osx?
  `uname -s` == 'Darwin'
end

def linux?
  `uname -s` == 'Linux'
end


# ----------------------------------------------------------------------
# TODO: Sorting/searching. Need to create a search mode where typing a search
# thingy would help you find the font you want.
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# TODO: Show/Include/Hide Categories. Tag fonts by size (tiny, medium, large),
# art style (hashy, strokey, bubbly, antialiased), shaded, etc. Toggling a
# category would change the size of the list of fonts considerably

# Examples of font category ideas here, to explain what I mean
# tiny: 1row, braced
# medium: contrib-C64-ascii___ (fonts between 4 and 10 lines high)
# large: calgphy2
# hashy: contrib-C64-ascii___ (all of contrib-C64 and contrib-bdf, etc)
# strokey: bolger, gothic
# bubbly: bubble, colossal, dotmatrix (filled with o, O, 8, (_), etc)
# antialiased: contrib-nvscript
# shaded: bright, contrast
# faded: cosmic, blood
# solid: delta-corps-priest-1,

# Fonts can be in more than one category, e.g. calgphy2 is large, stroked and
# hashy.

# When hiding or showing, you pick which categories you want to tag (yay, now we
# need a tagging UI - SERIOUSLY gotta learn me some NCurses).
#
# If you are HIDING a category, a font will vanish if matches at all.
# If you are SHOWING a category, a font will appear if ANY of its categories are
# shown.

# When showing, if ALL of the categories for the font are unchecked, it will
# disappear.
# When hiding, if ALL of the categories for the font are unchecked, it will
# appear.

# When HIDING large OR stroked OR hashy, calgphy2 will disappear
# When SHOWING large OR stroked OR hashy, calgphy2 will appear
# ----------------------------------------------------------------------


def show_usage
  puts <<USAGE


figlet-banner - Write a message to the console in ascii-art font

Usage:

    figlet-banner <options> [message]

Options:
    --help            - show this message
    --list            - list installed fonts
    --font <name>     - use this font
    -i, --interactive - interactively choose font
USAGE
end

def font_dir
  File.join(File.dirname(__FILE__), 'figlet-fonts')
end

def font_list
  font_folder = File.join(font_dir, '*.flf')
  Dir.glob(font_folder).map {|f| File.basename(f, '.flf') }.sort
end

def screen_width
  $stdout.winsize[1]
end

ESC = 27.chr

def debug(data)
  File.open("./debug.txt", "a") do |fp|
    fp.puts "#{Time.now.strftime('%F %T')} #{data}"
  end
end

class Banner
  BACK = 2.chr
  FORWARD = 6.chr
  PREVIOUS = 16.chr
  NEXT = 14.chr
  BOL = 1.chr
  EOL = 5.chr
  ENTER = "\r"
  FIRST = "FIRST".freeze # very first index
  LAST = "LAST".freeze # very last index
  TOP = "TOP".freeze # top of current column
  BOTTOM = "\u0016" # bottom of current column

  attr_reader :message, :fonts, :font_index
  def initialize(message, fonts, font='gothic')
    @message, @fonts, @font = message, fonts, font
    @font_index = fonts.index font
  end

  def interactive_choose_font
    done = false
    until done
      clear_screen
      render_list
      render_navhelp
      render_message
      begin
        state=`stty -g`
        system 'stty raw -echo cbreak'
        key = $stdin.getc
        key = if key=="\e"
                key = $stdin.getc
                case key
                when "["
                  key = $stdin.getc
                  case key
                  when "A"
                    PREVIOUS
                  when "B"
                    NEXT
                  when "C"
                    FORWARD
                  when "D"
                    BACK
                  else
                    key
                  end
                when "<"
                  FIRST
                when ">"
                  LAST
                when "v"
                  TOP
                when BOTTOM
                  BOTTOM
                end
              else
                key
              end
      ensure
        system "stty #{state}"
      end
      case key
      when FIRST
        @font_index = 0
      when LAST
        @font_index = fonts.size-1
      when TOP
        @font_index = font_index - (font_index % column_height)
      when BOTTOM
        @font_index = font_index + (column_height - (font_index % column_height)) - 1
        @font_index = fonts.size - 1 if @font_index >= fonts.size
      when BACK, "h"
        @font_index = (font_index - column_height) % fonts.size
      when FORWARD, "l"
        @font_index = (font_index + column_height) % fonts.size
      when PREVIOUS, "k"
        @font_index = (font_index - 1) % fonts.size
      when NEXT, "j"
        @font_index = (font_index + 1) % fonts.size
      when BOL, "^"
        @font_index = font_index % column_height
      when EOL, "$"
        @font_index += column_height until @font_index > fonts.size
        @font_index -= column_height
      when ENTER
        done = true
        clear_screen
        render_command
        render_message
      end
    end
  end

  def clear_screen
    # ESC[2J - clears screen
    # ESC[0;0H - sends cursor to 0,0; if all your fonts and the sample fit on
    # one screen it'll keep things from scrolling
    print "#{ESC}[2J#{ESC}[0;0H"
  end

  def font_dir
    File.join(File.dirname(__FILE__), 'figlet-fonts')
  end

  def font_file
    File.join(font_dir, fonts[font_index] + '.flf')
  end

  def font_name
    fonts[font_index]
  end

  def longest_font
    fonts.map(&:size).max + 3
  end

  def columns
    screen_width / longest_font
  end

  def column_height
    (fonts.size.to_f / columns).ceil
  end

  def render_list
    format = "%-#{longest_font}s"
    fonts2 = fonts.map {|f| '  ' + f }
    fonts2[font_index][0] = '>'
    font_columns = fonts2.each_slice(column_height).to_a

    font_columns.first.size.times do |i|
      row = ''
      font_columns.each do |column|
        this_font = column[i]
        if this_font == '> ' + font_name
          row << ("#{ESC}[1;42m" + format + "#{ESC}[0m") % column[i]
        else
          row << format % column[i]
        end
      end
      puts row
    end
  end

  def render_navhelp
    puts "#{ESC}[30;47mNavigate: arrows, h,j,k,l,^,$, or C-b,C-n,C-p,C-f, C-a,C-e, C-v,M-v, or M-<,M-> #{ESC}[0m"
  end

  def render_command
    puts %Q|#{File.basename($0)} --font #{font_name} "#{message}"|
    puts %Q|figlet -w #{screen_width} -d ~/bin/figlet-fonts -f #{font_name} "#{message}"|
    puts %Q|rubanner -f #{font_name} "#{message}" bold white on_light_blue|
    puts
  end

  def render_message
    if 1
      # If figlet is installed, it's way more bug-free, sadly
      puts `figlet -d #{font_dir} -f #{font_name} -w #{screen_width} '#{message}'`
    else
      begin
        font_file = File.join(font_dir, font_name + '.flf')
        font = Figlet::Font.new(font_file)
        figlet = Figlet::Typesetter.new(font)
        puts figlet[message]
      rescue NoMethodError
        puts "<Font does not have characters necessary to render message>"
      end
    end
  end

  def render
    render_message
  end
end

# ======================================================================
# MAIN SCRIPT
# ======================================================================
argv = ARGV.dup

if argv.include? '--help'
  show_usage
  exit
end

if argv.include? '--list'
  puts font_list
  exit
end

interactive = argv.index('-i') || argv.index('--interactive')
argv.slice!(interactive) if interactive

font_name = if index = argv.index('--font')
              argv.slice!(index, 2).last
            else
              'gothic'
            end


banner = Banner.new argv * ' ', font_list, font_name
if interactive
  # begin
  #   state=`stty -g`
  #   system 'stty raw -echo cbreak'
    banner.interactive_choose_font
  # ensure
  #   system "stty #{state}"
  # end
else
  banner.render
end
