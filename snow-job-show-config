#!/usr/bin/env ruby
# snow-job-show-config [script [-d|--defaults]] - Dump the config for a job (defaults to $SCRIPT)

# TODO: snow job default should show me just the default job. snow job -d should
# show me the job overlaid on defaults.
require 'deep_merge'
require 'json'
require 'colorize'
require 'optimist'

def get_script
  return $get_script if $get_script
  $get_script = ARGV.first || `get-ds-script`.strip || ENV['SCRIPT']
end

# TODO: Specialize between "overridden by job" and "explicitly specified, but with same value as job_defaults"
def color_for(in_defaults, in_job)
  if in_defaults && in_job     # overridden by job
    :light_green
  elsif in_defaults && !in_job # use default
    :light_black
  elsif !in_defaults && in_job # new field defined by job
    :light_yellow
  else                        # json punctuation
    :light_black
  end
end

def show_legend
  puts "-" * 80
  puts "Color Legend"
  [
    { name: "in defaults only", in_defaults: true, in_job: false },
    { name: "in job only (new field)", in_defaults: false, in_job: true },
    { name: "in defaults and in job (may be overridden or unchanged)", in_defaults: true, in_job: true },
    { name: "punctuation", in_defaults: false, in_job: false },
  ].each do |item|
    puts item[:name].send(color_for(item[:in_defaults], item[:in_job]))
  end
  puts "-" * 80
end

opts = Optimist.options do
  opt :defaults, "Include defaults", type: :boolean
  opt :legend, "Show color legend", type: :boolean
end

script = (ARGV.first || get_script).gsub(%r|/|, '.').sub(/\.py$/, '')

config = File.read(File.expand_path("~/data_services/etl/warehouse/finance/config/etl_nightly_config.json"))

json = JSON.parse(config)

# TODO: Make default a flag. Show defaults.merge(job_config), and highlight each line based on where it's coming from:

default_config = json["job_defaults"]
job_config = json["jobs"][script] || {}
merged_config = if opts[:defaults]
                  default_config.deep_merge!(job_config)
                else
                  job_config
                end

default_lines = JSON.pretty_generate(default_config).each_line.to_a
job_lines = JSON.pretty_generate(job_config).each_line.to_a
merged_lines = JSON.pretty_generate(merged_config).each_line.to_a

show_legend if opts[:legend]

# show name of script
job_name = opts[:defaults] ? "job_defaults" : script
puts job_name.bold.magenta

merged_lines.each do |line|
  # puts "line: #{line.rstrip}"
  key = line[/^\s*"[^"]+?"/]
  key = key.gsub(/"/, '').strip if key

  in_defaults = key && default_lines.any? { |l| l.include? key }
  in_job = key && job_lines.any? { |l| l.include? key }

  puts line.rstrip.send(color_for(in_defaults, in_job)).gsub("redshift", "\033[1;37;41mredshift\033[0m").gsub("snowflake", "\033[97;104msnowflake\033[0m")
end
