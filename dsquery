#!/usr/bin/env python
# dsquery - Run sql query. Basically a CLI console until I can get DataGrip
# licensed and running again. (At least, that's the theory. In practice, this
# thing lives where I do and it is AWESOME. Keeping this around because CLI
# makes me swoon. <3 <3 <3)
import argparse
import os
import sys
from dataservices import db

def query_should_be_bare(query):
    """returns True if the query would be better-looking with --bare"""
    return query.lower().startswith("select count(*) from") \
        or query.lower().startswith("truncate ") \
        or query.lower().startswith("drop table ") \
        or query.lower().startswith("insert ") \
        or query.lower().startswith("delete ") \
        or query.lower().startswith("create ")


def run(query, **attrs):
    warehouse = attrs.get('warehouse') or 'snowflake'

    dbo = attrs['dbo']
    conn = attrs['conn']

    try:
        if attrs.get('bare') is True:
            results = dbo.query(query)
            for row in results:
                for value in row:
                    print(value)
        else:
            results = dbo.query(query, return_type='dataframe')
            print(results.to_csv())

    finally:
        dbo.commit()


def main():
    parser = argparse.ArgumentParser(description='CLI query executor for snowflake')
    parser.add_argument('-f', '--file', help='Get SQL query from file', required=False)
    parser.add_argument('-q', '--query', help='SQL query', required=False)
    parser.add_argument('-w', '--warehouse', help='Warehouse (default: snowflake)', required=False)
    parser.add_argument('-c', '--csv', help='Show results as CSV', action='store_true', required=False, default=True)
    parser.add_argument('-b', '--bare', help='Show results as bare data (e.g. to pipe 1 json column to jq)', action='store_true', required=False)

    args, remaining_args = parser.parse_known_args()
    query = ""

    if args.query is not None:
        query = args.query
    elif args.file is not None:
        with open(args.file, "r") as infile:
            query = infile.read()
    else:
        # No --query? I probably forgot it and just jammed this onto the end, which feels natural
        # `dsquery "SELECT 42"` seems like a reasonable DWIM
        query = sys.argv[-1]

    if not args.bare and query_should_be_bare(query):
        args.bare = True


    try:
        warehouse = args.warehouse or 'snowflake'
        dbo = db.DB(warehouse)
        conn = dbo.connect(warehouse)

        run(query, dbo=dbo, conn=conn, csv=args.csv, warehouse=args.warehouse, bare=args.bare)

    finally:
        dbo.close()


if __name__ == "__main__":
    main()
