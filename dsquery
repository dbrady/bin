#!/usr/bin/env python
# dsquery - Run sql query. Basically a CLI console until I can get DataGrip
# licensed and running again.
#
# dsquery [options] --query <query>
#
# Options:
#   -b, --bare             - Output bare result (best for query returning an atomic value)
#   -c, --csv              - Output results as CSV
#   -f, --file=<file>      - Get query from file instead of CLI (useful for multiline)
#   -q, --query=<sql>      - Specify query from command-line instead of file
#   -w, --warehouse=<wh>   - Run query in this warehouse [default: snowflake]
#
# If neither --bare nor --csv are specified, results will be displayed as a
# DataFrame, which is tidy but will elide if the rows or columns exceed screen
# height or width, respectively.
#
# 2023-04-18 At least, that's the theory. In practice, this thing lives where I
# do and it is AWESOME. Keeping this around because <3 <3 <3

import argparse
import os
import sys
from dataservices import db


def run(query, **attrs):
    warehouse = attrs.get('warehouse') or 'snowflake'

    dbo = attrs['dbo']
    conn = attrs['conn']

    if attrs.get('bare') is True:
        results = dbo.query(query)
    else:
        results = dbo.query(query, return_type='dataframe')
    dbo.commit()

    if attrs.get('bare') is True:
        for row in results:
            for value in row:
                print(value)
    elif attrs.get('csv') is True:
        print(results.to_csv())
    else: # else just print the bare dataframe
        print(results)


def main():
    parser = argparse.ArgumentParser(description='CLI query executor for snowflake')
    parser.add_argument('-f', '--file', help='Get SQL query from file', required=False)
    parser.add_argument('-q', '--query', help='SQL query', required=False)
    parser.add_argument('-w', '--warehouse', help='Warehouse (default: snowflake)', required=False)
    parser.add_argument('-c', '--csv', help='Show results as CSV', action='store_true', required=False)
    parser.add_argument('-b', '--bare', help='Show results as bare data (e.g. to pipe 1 json column to jq)', action='store_true', required=False)

    args, remaining_args = parser.parse_known_args()
    query = ""

    if args.query is not None:
        query = args.query
    elif args.file is not None:
        with open(args.file, "r") as infile:
            query = infile.read()
    else:
        # No --query? I probably forgot it and just jammed this onto the end, which feels natural
        # `dsquery "SELECT 42"` seems like a reasonable DWIM
        query = sys.argv[-1]

    try:
        warehouse = args.warehouse or 'snowflake'
        dbo = db.DB(warehouse)
        conn = dbo.connect(warehouse)

        run(query, dbo=dbo, conn=conn, csv=args.csv, warehouse=args.warehouse, bare=args.bare)

    finally:
        dbo.close()




if __name__ == "__main__":
    main()
