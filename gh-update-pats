#!/usr/bin/env ruby
# gh-update-pats <new_pat> - Update github PATs
#
# This script will update
# ~/.bundle/config and
# ~/acima/devel/application_management_system/.bundle/config with your new
# Personal Access Token, since bundle config doesn't bundle config.
#
# DevOps has a document on Confluence that says how to create a personal access
# token, but it is incomplete (doesn't say which permissions are necessary), so
# I'm dumbing this down so Dave At 4am can follow these instructions.
#
# https://acima.atlassian.net/wiki/spaces/DEVOPS/pages/198148163/GitHub+SSH+Personal+Access+Tokens
#
# IF YOU ARE READING THIS AND YOU ARE NOT DAVE:
#
# 1. Try just following the instructions down in the BANNER section below.
#
# 2. If you still want to use this script, update the ACIMA_DEVEL constant below
#    to point where you keep your acima projects. You'll also want to `gem
#    install optimist colorize` and you'll need dbrady_cli.rb from this same
#    repo.

require "colorize"
require "optimist"
require_relative "lib/dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli
  attr_reader :pat

  # Update this if you don't put your code where I do.
  ACIMA_DEVEL = "~/acima/devel"

  def run
    @opts = Optimist.options do
      banner <<BANNER
gh-update-pats <new_pat> - Update github PATs

This fixes this error:

```
Fetching source index from https://rubygems.pkg.github.com/acima-credit/

#{'Bad username or password for https://dbrady@rubygems.pkg.github.com/acima-credit/.'.red}
#{'Please double-check your credentials and correct them.'.red}
```

1. Go to github, click on your portrait in the upper right, click Settings. Or
   click here: https://github.com/settings/profile

2. In the left sidebar click < > Developer Settings

3. On the new page, in the left sidebar, click Personal access tokens to open
   a dropdown and choose Tokens (classic)

4. In the upper right click the button that says Generate New Token

5. If you get challenged for a 2FA here, the code you want is in Google
   Authenticator, not Duo

6. These permissions are documented in the onboarding wiki:

   #{'repo, workflow, write:packages, admin:org'.cyan}

7. #{'WATCH OUT'.bold.white.on_red}: Click the Generate New Token button. You'll go back to the
   list of tokens, there will be a green box with your new token in it, right
   below a blue box saying "Make sure to copy this token... you won't see this
   again!". #{'COPY THIS BEFORE YOU CONFIGURE SSO! THEY ARE NOT KIDDING.'.bold.red}

8. #{'SRSLY. COPY THE TOKEN NOW.'.bold.red}

9. Click Configure SSO to open the list of orgs. Click "Authorize" next to
   acima-credit. THIS WILL REDIRECT TO YOU AWAY FROM THIS PAGE so I really hope
   you copied the token when I told you to. If you did not, this was all just for
   practice. Go back to step 7, you silly goose.

10. Open .bundle/config and update the BUNDLE_HTTPS line with the correct
   PAT. THIS SCRIPT WILL DO THIS PART FOR YOU, BUT YOU NEED TO DO THE REST FIRST.

Options:
BANNER
      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :quiet, "Run with minimal output", default: false
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    Optimist.educate if ARGV.empty?

    @pat = ARGV.first

    raise "You must provide a github personal access token!" unless pat =~ /^ghp_/

    # PATHS TO UPDATE
    files = [
      "~/.bundle/config",
      "#{ACIMA_DEVEL}/application_management_system/.bundle/config",
      "#{ACIMA_DEVEL}/merchant_portal/.bundle/config",
      "#{ACIMA_DEVEL}/funding-request-service/.bundle/config",
      "#{ACIMA_DEVEL}/global_customer/.bundle/config",
    ].map {|file| File.expand_path(file)}

    # TOKENS TO SET
    tokens = [
      "BUNDLE_RUBYGEMS__PKG__GITHUB__COM",
      "BUNDLE_HTTPS://RUBYGEMS__PKG__GITHUB__COM/ACIMA___CREDIT/",
      "BUNDLE_GEMS__KARAFKA__IO:",
    ]

    files.each do |file|
      puts file
      lines = File.readlines(File.expand_path(file)).map(&:strip)
      tokens.each do |token|
        lines.reject! {|line| line =~ /^\s*#{token}/}
        lines << "#{token}: #{pat}"
      end
      puts lines
      puts "##############"

      timestamp = Time.now.strftime("%Y%m%s%H%M%S")
      backupfile = "#{file}.#{timestamp}"
      run_command "cp #{file} #{backupfile}"
      File.open(file, "w") {|fp| fp.puts lines }
      puts "Wrote #{file}"
    end
  end

end


if __FILE__ == $0
  Application.new.run
end
