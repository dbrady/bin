#!/bin/bash
# remaster - pull down latest master, merge, rebundle and rerun database migrations, then rebase master into the current branch.

# TODO: PORT THIS TO RUBY WITH OPTIMIST
# TODO:  PORT THIS TO RUBY WITH OPTIMIST
# TODO:   PORT THIS TO RUBY WITH OPTIMIST
# TODO:    PORT THIS TO RUBY WITH OPTIMIST
# TODO:     PORT THIS TO RUBY WITH OPTIMIST
# TODO:      PORT THIS TO RUBY WITH OPTIMIST
# TODO:       PORT THIS TO RUBY WITH OPTIMIST
# TODO:        PORT THIS TO RUBY WITH OPTIMIST
# TODO:         PORT THIS TO RUBY WITH OPTIMIST
# TODO:          PORT THIS TO RUBY WITH OPTIMIST
# TODO:           PORT THIS TO RUBY WITH OPTIMIST
# TODO:            PORT THIS TO RUBY WITH OPTIMIST
# TODO:             PORT THIS TO RUBY WITH OPTIMIST
# TODO:              PORT THIS TO RUBY WITH OPTIMIST
# TODO:               PORT THIS TO RUBY WITH OPTIMIST
# TODO:                PORT THIS TO RUBY WITH OPTIMIST
# TODO:                 PORT THIS TO RUBY WITH OPTIMIST
# TODO:                  PORT THIS TO RUBY WITH OPTIMIST
# TODO:                   PORT THIS TO RUBY WITH OPTIMIST
# TODO:                    PORT THIS TO RUBY WITH OPTIMIST

# 1. SSO LOGIN              : aws-check-sso-login || aws sso login
# 2. STASH                  : git stash
# 3. GO                     : go main
# 4. PULL                   : git pull
# 5. BUNDLE                 : bundle install
# 6. MIGRATE                : rails db:migrate (only if schema has changed)
# 7. RETURN                 : go - (only if we were on a story branch)
# 8. REBASE                 : git rebase main
# 9. APPLY                  : git stash apply (only if we stashed changes)

# 1. [TODO] Port this to ruby. The options are just too insane. Also do this, if
# for no other reason, to give a high-level imperative script at the top like
# git_stash; go_master; git_pull... return_to_story_branch, git_rebase,
# git_stash_apply, etc.
# 2. [TODO] add -p, --pretend option to show the remastering plan/commands
# 3. [DONE] add -q, --quick mode to skip bundling and migrations
# 4. [DONE] add -d, --done option to return to master and stay there. Abandon (delete?) the current branch.
# 5. [DONE] (Done: Use git-main, which uses git-main-branch.) Know which repos
# have a master branch by another name (main, develop, etc). Unsure if the
# community has standardized on non-master names yet, but if worse comes to
# worst I could add a .rc file that remembers the main branch name for a repo or
# folder. Could also add -n <name_of_main_branch> option.

QUICK="false"
DONE="false" # if true, do not return to story branch

log() {
    # Need -e to show colors in bash
    # must be omitted in sh (will print a literal "-e")
    echo -e "\033[32m$@\033[0m"
}

# Like log but use rub1nner to really catch the eye
log_command() {
    rub1nner "$@"
}

mp_hack_restore_files_that_should_have_been_committed_but_apparently_were_not() {
    # quick MP hack -- these files get desynced all the time and remigrate marks them as touched
    git restore Gemfile.lock db/seeds.rb yarn.lock
}

while getopts "hq" opt; do
    case ${opt} in
        h )
            echo "remaster - pull down and rebase onto latest main branch"
            echo
            echo "Usage:"
            echo "    remaster [options]"
            echo
            echo "-h    Show this help message"
            echo "-q    Quick mode - do not rebundle gems or remigrate the database"
            echo "-d    Done mode - done with this branch, go back to main and stay there"
            exit 1
            ;;

        q )
            QUICK="true"
            ;;
        d )
            DONE="true"
            ;;
    esac
done

BRANCH=`git branch | grep '*' | awk '{print $2}'`
MAIN_BRANCH=`git main-branch`
git isclean
ISCLEAN=$?
aws-check-sso-login
IS_LOGGED_IN=$?

# 1. CHECK LOGIN
if [ "$IS_LOGGED_IN" == "0" ]; then
    log "You are logged into aws, bundler should not be a problem"
elif [ "$QUICK" == "true" ]; then
    log "You are not logged into aws, but we're not going to rebundle so it's fine. Continuing."
else
    log "You are NOT logged into aws. Bundler will stop you. Run aws sso login and run this script again."
    exit -1
fi

# 2. STASH
if [ "$ISCLEAN" == "0" ]; then
    log "Branch is clean, NOT stashing..."
else
    log "Branch is dirty, stashing changes..."
    log_command "git stash"
    git stash
fi

if [ "$MAIN_BRANCH" == "$BRANCH" ]; then
    log "You are already on main branch '$BRANCH', staying put..."
    DONE="true"
else
    # 3. GO
    log "You are NOT on main branch, hopping to $MAIN_BRANCH..."
    log_command "go $MAIN_BRANCH"
    go $MAIN_BRANCH
fi

# 4. PULL
log_command "git pull"
git pull

if [ $QUICK == "false" ]; then
    # 5. BUNDLE
    log_command "bundle install"
    bundle install

    # 6. MIGRATE
    log_command "remigrate -f"
    remigrate -f

    mp_hack_restore_files_that_should_have_been_committed_but_apparently_were_not
else
    log "Quick mode - skipping bundle install"
    log "Quick mode - skipping remigrate"
fi

if [ "$MAIN_BRANCH" == "$BRANCH" ]; then
    log "You were on main branch, staying put..."
else
    if [ $DONE == "false" ]; then
        # 7. RETURN
        log "You were on $BRANCH, hopping back..."
        log_command "go $BRANCH"
        go $BRANCH

        # 8. REBASE
        log "Rebasing branch onto tip of main branch '$MAIN_BRANCH'..."

        mp_hack_restore_files_that_should_have_been_committed_but_apparently_were_not

        log_command "git rebase $MAIN_BRANCH"
        git rebase $MAIN_BRANCH

else
        # NO RETURN; REBASE ALREADY DONE
        log "Done with that branch; staying on main branch"
    fi
fi

mp_hack_restore_files_that_should_have_been_committed_but_apparently_were_not

# 9. APPLY
if [ "$ISCLEAN" == "0" ]; then
    log "Branch was clean, no stash apply..."
else
    log "Branch was dirty, reapplying stashed changes..."
    log_command "git stash apply"
    git stash apply
fi
