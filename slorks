#!/usr/bin/env ruby
# slorks - run slork for current/ongoing work
require "colorize"
require "optimist"
require_relative "dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli

  opt_flag :edit, :table

  def run
    @opts = Optimist.options do
      opt :debug, "Print extra debug info", default: false
      opt :file, "Input file", default: File.expand_path(File.join(File.dirname(__FILE__), "slorks.org"))
      opt :edit, "Edit input file (Specific to my tmux/emacs setup -- opens with emacs-open)", default: false
      opt :table, "Quick display as just table", default: false
    end
    puts opts.inspect if debug?

    run_command "emacs-open --absolute '#{opts[:file]}'" and exit if edit?

    slorks = File.readlines(opts[:file]).reject.with_index {|line, index| index < 2 }.map do |line|
      words = line.split(/\|/).map(&:strip).tap {|ray| ray.pop; ray.shift}
      {
        board: words[0],
        jira: words[1],
        repo: words[2],
        pr: words[3],
        title: words[4],
        status: words[5],
        notes: words[6],
      }
      # %i(board, jira, repo, pr, title, status, notes).zip(line.split(/\|/).tap {|ray| ray.pop; ray.shift }.map(&:strip)).flatten
    end

    if table?
      show_table slorks
      exit
    end

    slorks.each.with_index(1) do |slork, index|
      command = %Q|slork --board=#{slork[:board]} --jira=#{slork[:jira]} --repo=#{slork[:repo]} --title="#{slork[:title]}" --status="#{slork[:status]}"|

      command += %Q| --pr=#{slork[:pr]}| if slork[:pr] != ""
      command += %Q| --notes="#{slork[:notes]}"| if slork[:notes] != ""
      puts command.cyan if debug?
      system command
      puts "--" unless index == slorks.size
    end
  end

  def show_table(slorks)
    longests = Hash.new 0
    keys = %i(board jira repo pr title status notes)
    keys.each {|key| longests[key] = key.to_s.size }

    slorks.each {|slork| keys.each {|key| longests[key] = [longests[key], slork[key].to_s.size].max }}

    format = "| " + keys.map {|key| "%-#{longests[key]}s" }.join(" | ") + " |"

    puts format % keys
    puts((format % ([''] * keys.size)).gsub(/\s/, '-'))

    slorks.each do |slork|
      puts format % (keys.map {|key| slork[key] })
    end

  end
end


if __FILE__ == $0
  Application.new.run
end
