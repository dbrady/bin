#!/usr/bin/env ruby
require 'colorize'
require 'csv'
require 'optimist'
require 'text-table'

class DsJobsApp

  def run
    users = {
      "31b95b7de045" => "dave",
      "-1" => "kanav",
      "5c83d468efbb" => "kenton",
      "b58cf084a090" => "kym",
      "1bb4fcfc3ac9" => "rikki",
      "98909e115b88" => "zack",
      "production-dataservices-node" => "production"
    }
    host_case_sql = "CASE " \
                    + users
                        .each_pair
                        .map {|host, name| "WHEN host='#{host}' THEN '#{name}'" }
                        .join(' ') \
                    + " ELSE host END"

    # TODO: update me with my list of known old hostnames (because we haz dem)
    hostname=`hostname`.strip
    raise "Hey you have a hardcoded hostname of '31b95b7de045' but your hostname is '#{hostname}', what gives?" if hostname != '31b95b7de045' && hostname != 'Mac1205Pro.local'

    opts = Optimist::options do
      opt :end, "Show jobs started (not ended!) on or before this datetime (always UTC)", short: :none, type: :string
      opt :failures, "Show failures only", short: :none, default: false
      opt :host, "Hostname", short: :none, type: :string
      opt :id, "Show id column", short: :none, default: false
      opt :job, "Job name or path/to/job.py (Defaults to get-ds-script. Set to * to get all. Use % to pattern match. Can be CSV of multiple jobs.)", short: :none, type: :string
      opt :limit, "Max jobs to return", short: :none, default: 20
      opt :mine, "Same as --host=#{hostname}", short: :none, default: false
      opt :mst, "Show only times in America/Denver (MST/MDT)", short: :none, default: false
      opt :notes, "Show notes column", short: :none, default: false
      opt :prod, "Same as --host=production-dataservices-node", short: :none, default: false
      opt :reverse, "Order ascending (and take oldest before limit)", short: :none, default: false
      opt :start, "Show jobs started (not ended!) on or after this datetime (always UTC)", short: :none, type: :string
      opt :utc, "Show only times in UTC", short: :none, default: false
      opt :warehouse, "Warehouse", short: :none, type: :string, default: "snowflake"
      opt :where, "Override where clause entirely", short: :none, type: :string

      opt :debug, "Show extra debugging", default: false
      opt :pretend, "Show query and exit", default: false
      opt :verbose, "Print query and other deets", default: false
    end
    Optimist::die "Cannot specify --host and --mine at same time" if opts[:mine] && opts[:host_given]
    Optimist::die "Cannot specify --host and --prod at same time" if opts[:prod] && opts[:host_given]
    Optimist::die "Cannot specify --utc and --mst at same time" if opts[:utc] && opts[:mst]
    puts opts.inspect if opts[:debug]

    opts[:host] = hostname if opts[:mine]
    opts[:host] = 'production-dataservices-node' if opts[:prod]

    # optional columns
    show_notes = ", notes " if opts[:notes]
    show_id = ", id " if opts[:id]

    # where clause
    wheres = []

    # job
    if opts[:job_given] && opts[:job] != "*"
      jobs = opts[:job].split(/,/)
               .map {|job| if job == '.' then `get-ds-script`.strip else job end }         # replace . with get-ds-script
               .map {|job| job.gsub(%r|/|, '.').sub(/\.py$/, '')}                          # change path/to/job.py to path.to.job

      if opts[:warehouse] =~ /redshift/
        if jobs.any? {|job| job.include?("%")}
          # e.g.
          #    --job=foo%       -->  job SIMILAR TO '(foo%)'
          #    --job=foo%,bar%  -->  job SIMILAR TO '(foo%|bar%)'
          job_list = "'(%s)'" % jobs.join("|")
          wheres << "job SIMILAR TO #{job_list}"
        else
          job_list = jobs.map {|job| "'#{job}'"}.join(', ')
          wheres << "job IN (#{job_list})"
        end
      else
        job_list = jobs.map {|job| "'#{job}'"}.join(', ')
        wheres << "job ILIKE ANY (#{job_list})"
      end
    elsif !opts[:job_given]
      job = `get-ds-script`.strip.gsub(%r|/|, '.').sub(/\.py$/, '')
      wheres << "job IN ('#{job}')"
    end

    # host
    wheres << "host='#{opts[:host]}'" if opts[:mine] || opts[:prod] || opts[:host_given]

    # failures
    wheres << "success=0" if opts[:failures]

    # start
    wheres << "start_time >= '#{opts[:start]}'" if opts[:start_given]

    # end
    wheres << "end_time <= '#{opts[:end]}'" if opts[:end_given]

    # Pack up the wheres array into a WHERE clause.
    where = if opts[:where_given] && !wheres.empty?
              "WHERE\n            " + (wheres + [opts[:where]]).join("\n            AND ")
            elsif opts[:where_given]
              "WHERE #{opts[:where]}"
            elsif wheres.empty?
              ""
            else
              "WHERE " + wheres.map {|w| "\n            #{w}"}.join(" AND ")
            end

    # Show times in MST / UTC / BOTH
    times = []

    if opts[:debug]
      puts "Shouw UTC if !opts[:mst]: #{!opts[:mst]}"
      puts "Shouw MST if !opts[:utc]: #{!opts[:utc]}"
    end

    if !opts[:mst] # Include UTC because --utc was specified OR no time was.
      times << ["start_time", "end_time"]
    end

    if !opts[:utc] # Include MST because --mst was specified OR no time was.
      if opts[:warehouse] =~ /redshift/
        times << [
          "start_time AT TIME ZONE 'UTC' AT TIME ZONE 'America/Denver' AS start_time_local",
          "end_time AT TIME ZONE 'UTC' AT TIME ZONE 'America/Denver' AS end_time_local"
        ]
      else
        times << [
          "CONVERT_TIMEZONE('UTC', 'America/Denver', start_time) AS start_time_local",
          "CONVERT_TIMEZONE('UTC', 'America/Denver', end_time) AS end_time_local"
        ]
      end
    end

    order = opts[:reverse] ? "ASC" : "DESC"

    time_sql = times * ', '

    # Finally, build the query
    query = if opts[:warehouse] =~ /redshift/
              <<QUERY
WITH jobs1 AS (
    SELECT
        host
        #{show_id}
        , job
        , start_time
        , end_time
        , success
        , job_failed_count
        , retry_count
        #{show_notes}
    FROM
        f_etl_job_details
        #{where}
        ORDER BY start_time #{order} LIMIT #{opts[:limit]}
)
, jobs2 AS (
    SELECT
        host
        #{show_id}
        , job
        , start_time
        , end_time
        , DATEDIFF(second, start_time, end_time) AS duration
        , success
        , job_failed_count
        , retry_count
        #{show_notes}
    FROM
        jobs1
)
SELECT
    #{host_case_sql}
    #{show_id}
    , job
    , #{time_sql}
    , LPAD(FLOOR(duration/3600),2,0)||':'||LPAD(FLOOR(MOD(duration, 3600)/60),2,0)||':'||LPAD(MOD(duration, 60),2,0) AS elapsed
    , success
    , job_failed_count
    , retry_count
    #{show_notes}
FROM
    jobs2
QUERY
            else
              <<QUERY
WITH jobs1 AS (
    SELECT
        host
        #{show_id}
        , job
        , start_time
        , end_time
        , DATEDIFF('second', start_time, (CASE WHEN end_time IS NOT NULL THEN end_time ELSE CURRENT_TIMESTAMP END)) AS duration
        , success
        , job_failed_count
        , retry_count
        #{show_notes}
    FROM
        f_etl_job_details
        #{where}
    ORDER BY start_time #{order}
    LIMIT #{opts[:limit]}
)
SELECT
    #{host_case_sql} AS host
    #{show_id}
    , job
    , #{time_sql}
    , LPAD(FLOOR(duration/3600),2,0)||':'||LPAD(FLOOR(MOD(duration, 3600)/60),2,0)||':'||LPAD(MOD(duration, 60),2,0) AS elapsed
    , success
    , job_failed_count
    , retry_count
    #{show_notes}
 FROM
    jobs1
QUERY
            end

    if opts[:pretend]
      puts query
    elsif opts[:verbose]
      puts query.cyan
    end
    exit(0) if opts[:pretend]

    query = query.each_line.map(&:strip).to_a.join(' ').gsub(/\s+/, ' ')

    command = if opts[:warehouse] =~ /redshift/
                %Q(dsquery --csv --warehouse #{opts[:warehouse]} --query "#{query}")
              else
                %Q(dsquery --csv --warehouse #{opts[:warehouse]} --query "#{query}")
              end

    puts command.cyan if opts[:debug]
    results = `#{command}`.strip

    puts CSV.parse(results, headers: true).to_table(first_row_is_head: true)
  end
end

DsJobsApp.new.run
