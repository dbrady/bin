#!/usr/bin/env ruby
# git new-branch <jira_id> <branch_name>
#
# Usage:
# git new-branch 5658 set_default_epot_in_merchant_settings
# => git co -b dbrady/ATL-5658/set_default_epot_in_merchant_settings
require "colorize"
require "optimist"

def usage
  usage=<<USAGE
USAGE
end

# TODO: Google harder. Read https://git-scm.com/docs/git-help more
# thoroughly. All the blogs on custom git commands boil down to
# "git-foo will give you the 'git foo' command, aren't I clever!" and
# exactly ZERO of them show how to write a custom HELP command for
# them. I want to know if 'git help new-branch' could ever work, and
# if so if it's a simple git-help-new-branch or githelp-new-branch or
# more involved like installing a custom manpage.

opts = Optimist.options do
  banner <<USAGE
git new-branch [options] <jira_id> <branch_name>

Usage:

    git new-branch 5658 set-default-epot-in-merchant-settings
    => git co -b dbrady/ATL-5658/set-default-epot-in-merchant-settings
    get new-branch --type=hotfix 1234 etl_f_this_job_is_busted
    => git co -b hotfix/DS-1234/etl_f_this_job_is_busted

Note:

    Options can only be passed in when directly running this script
    (git-new-branch), not when auto-dispatching it from git (git new-branch)

Options:
USAGE

  opt :force, 'Continue even if warnings, e.g. not on master', default: false
  opt :debug, 'Show detail debugging information', default: false
  opt :pretend, 'Show the git command that would be run, but do not run it', default: false
end
puts opts.inspect if opts[:debug]
Optimist::die "Expected exactly 2 arguments, got #{ARGV.size}" unless ARGV.size == 2
Optimist::die "First argument must be a Jira ticket id" unless ARGV.first.to_i > 0

def filename_to_job_name(name)
  name.gsub(%r|/|, ".").sub(/.py$/, "")
end

JIRA_PREFIX='CREDIT'

ticket, branch = ARGV

if opts[:debug]
  puts "ticket: #{ticket}"
  puts "branch: #{branch}"
end

current_branch = `git current-branch`.strip
main_branch = `git main-branch`.strip

if !(current_branch == main_branch || opts[:force])
  puts "You are not on the main branch (#{main_branch}). If you meant to branch from here, rerun with --force, e.g.:".yellow
  puts "git-new-branch --force #{ARGV.join(' ')}"
  exit
end

ticket = "#{JIRA_PREFIX}-#{ticket}" if ticket =~ /^\d+$/
full_branch_name = "dbrady/#{ticket}/#{branch}"

# Ensure branch name is short enough to fit through the CI mangler
if full_branch_name.size > 60
  puts "ERROR: branch name is too long (length = #{full_branch_name.size}, must be <= 60)"
  exit 2
end

command = "git co -b #{full_branch_name}"
puts command.cyan

if !opts[:pretend]
  puts `#{command}`
end
