#!/usr/bin/env ruby
# git new-branch <jira_id> <branch_name>
#
# Usage:
# git new-branch 5658 set_default_epot_in_merchant_settings
# => git co -b dbrady/ATL-5658/set_default_epot_in_merchant_settings
require "optimist"

def usage
  usage=<<USAGE
USAGE
end

# TODO: Google harder. Read https://git-scm.com/docs/git-help more
# thoroughly. All the blogs on custom git commands boil down to
# "git-foo will give you the 'git foo' command, aren't I clever!" and
# exactly ZERO of them show how to write a custom HELP command for
# them. I want to know if 'git help new-branch' could ever work, and
# if so if it's a simple git-help-new-branch or githelp-new-branch or
# more involved like installing a custom manpage.

opts = Optimist.options do
  banner <<USAGE
git new-branch [options] <jira_id> <branch_name>
Usage:
    git new-branch 5658 set-default-epot-in-merchant-settings
    => git co -b dbrady/ATL-5658/set-default-epot-in-merchant-settings
    get new-branch --type=hotfix 1234 etl_f_this_job_is_busted
    => git co -b hotfix/DS-1234/etl_f_this_job_is_busted
USAGE

  opt :type, 'Type of branch. Determines branch name prefix.', default: 'feature' # default: 'dbrady'
  opt :hotfix, 'Create hotfix branch. Same as --type=hotfix.'
  opt :job, 'Convert branch name from a filename to a job. (Cancel with --no-job)', default: true
end
Optimist::die "Expected exactly 2 arguments, got #{ARGV.size}" unless ARGV.size == 2
Optimist::die "First argument must be a Jira ticket id" unless ARGV.first.to_i > 0

# TEAM_PREFIX='ATL'
TEAM_PREFIX='DS'
branch_type = if opts[:hotfix]
                'hotfix'
              else
                opts[:type]
              end

ticket=ARGV[0]
branch=ARGV[1]

if opts[:job]
  branch = branch.gsub(%r|/|, ".").sub(/.py$/, "")
end

ticket = "#{TEAM_PREFIX}-#{ticket}" if ticket =~ /^\d+$/

# full_branch_name = "dbrady/#{ticket}/#{branch}"
full_branch_name = "#{branch_type}/#{ticket}/#{branch}"

# Ensure branch name is short enough to fit through the CI mangler
# DS team doesn't use this
# if full_branch_name.size > 60
#   puts "ERROR: branch name is too long (length = #{full_branch_name.size}, must be <= 60)"
#   exit 2
# end

command = "git co -b #{full_branch_name}"
puts command
puts `#{command}`
