#!/usr/bin/env ruby
# git new-branch <jira_id> <branch_name>
#
# Usage:
# git new-branch 5658 set_default_epot_in_merchant_settings
# => git co -b dbrady/ATL-5658/set_default_epot_in_merchant_settings

# git new-branch COR-5658 set_default_epot_in_merchant_settings
# => git co -b dbrady/COR-5658/set_default_epot_in_merchant_settings
require "colorize"
require "optimist"
require_relative "dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli

  opt_flag :slork

  def run
    @opts = Optimist.options do
      banner <<USAGE
git new-branch [options] [<jira_team>-]<jira_id> <branch_name>

Usage:

    git new-branch 5658 set-default-epot-in-merchant-settings
    => git co -b dbrady/ATL-5658/set-default-epot-in-merchant-settings
    get new-branch --type=hotfix 1234 etl_f_this_job_is_busted
    => git co -b hotfix/DS-1234/etl_f_this_job_is_busted

Note:

    Options can only be passed in when directly running this script
    (git-new-branch), not when auto-dispatching it from git (git new-branch)

Options:
USAGE

      opt :"jira-team", 'Jira ticket team prefix (or just pass <TEAM>-<id> as ticket id)', default: 'MPS'
      opt :slork, "Add this branch and ticket to a new entry to the slorks list", default: true

      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :quiet, "Run with minimal output", default: false
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    Optimist.die "Expected exactly 2 arguments, got #{ARGV.size}" unless ARGV.size == 2
    Optimist.die "First argument must be a Jira ticket id" unless (ARGV.first.to_i > 0 || ARGV.first =~ /^([A-Z]+)-(\d+)/i)

    ticket, branch = ARGV
    ticket_id = ticket

    if ticket =~ /^([A-Z]+)-(\d+)/i
      opts[:'jira-team'] = $1
      ticket_id = $2
    else
      ticket_id = ticket
      ticket = "#{opts[:'jira-team']}-#{ticket}"
    end

    full_branch_name = "dbrady/#{ticket}/#{branch}"

    if opts[:debug]
      puts "ticket: #{ticket}"
      puts "ticket_id: #{ticket_id}"
      puts "branch: #{branch}"
    end

    current_branch = `git current-branch`.strip
    main_branch = `git main-branch`.strip

    if !(current_branch == main_branch || opts[:force])
      puts "You are not on the main branch (#{main_branch}). If you meant to branch from here, rerun with --force, e.g.:".yellow
      puts "git-new-branch --force #{ARGV.join(' ')}"
      exit
    end

    # Ensure branch name is short enough to fit through the CI mangler
    if full_branch_name.size > 60
      puts "ERROR: branch name is too long (length = #{full_branch_name.size}, must be <= 60)"
      exit 2
    end

    command = "git co -b #{full_branch_name}"
    puts command.cyan

    puts `#{command}` unless pretend?

    add_branch_to_slorks(ticket_id, branch) if slork?
  end

  def add_branch_to_slorks(ticket_id, branch)
    slorks_file = File.expand_path("~/bin/slorks.org")
    repo = Dir.pwd.split('/').last
    slork_text = "| #{opts[:'jira-team']} | #{ticket_id} | #{repo}            |       | #{branch_to_sentence(branch)}                                                       | p |  |"

    File.open(slorks_file, "a") do |fp|
      puts "#{pretend? ? "Not " : ""}Adding to ~/bin/slorks.org:"
      puts slork_text.cyan
      fp.puts slork_text unless pretend?
    end

    # Align the slork table
    run_command "emacs-open -a '#{slorks_file}'"

    # TODO: Refactor this and emacs-open into emacs-send?
    tmux_command = "tmux send-keys -twork:1"
    run_command "#{tmux_command} C-u C-u C-p"
    run_command "#{tmux_command} M-x org-cycle"
    run_command "#{tmux_command} C-m"
    # TODO: Save. tmux send-keys is hinky and skittish. If I send C-x C-s, the M-x org-cycle won't work
    # Even with a sleep 0.5. Maybe try longer?
  end

  def filename_to_job_name(name)
    name.gsub(%r|/|, ".").sub(/.py$/, "")
  end

  # "create-test-branch" => "Create test branch"
  def branch_to_sentence(branch)
    branch.split(/[-_]/).join(' ').capitalize
  end
end


if __FILE__ == $0
  Application.new.run
end
