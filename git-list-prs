#!/usr/bin/env ruby
# git-list-prs - list known prs for this repo
#
# EDIT: This works and it's ok, but it's a lot of ceremony. I'm doing this on
# purpose: if I decide to embrace Sequel this high ceremony ratio will be ideal
# to make this be example code, as there's very little business logic here to
# clutter up the framework code.
#
# TODO: Extract the DATABASE_PATH, DB, and PrHistory code to
# e.g. "pr_history.rb". This will make the code shareable between the git-x-pr
# scripts.

require "colorize"
require "extralite"
require "optimist"
require "sequel"
require "text-table"
require_relative "dbrady_cli"
String.disable_colorization unless $stdout.tty?


# CREATE TABLE pr_history (id INTEGER NOT NULL PRIMARY KEY, repo TEXT NOT NULL, branch TEXT NOT NULL, pr INTEGER NOT NULL, created_at TIMESTAMP DEFAULT current_timestamp, updated_at TIMESTAMP DEFAULT current_timestamp, deleted_at TIMESTAMP DEFAULT NULL)

class Application
  include DbradyCli

  opt_flag :names
  opt_flag :all

  DATABASE_PATH = File.expand_path('~/bin/db/git-pr-history.db')
  DB = Sequel::sqlite(DATABASE_PATH)

  if !ARGV.include?("create")
    class PrHistory < Sequel::Model(DB[:pr_history])
      plugin :timestamps, update_on_create: true
    end
  end

  def run
    @opts = Optimist.options do
      banner <<BANNER
git-list-prs - list known prs for this repo

git-list-prs [<command>]

Commands:

  console - connect to sqlite3 database

  archive - mark a PR as archived

  search - search for specific PRs

  create - create PR history table (first time install only)

Options:
BANNER
      opt :names, "Sort by names", default: false
      opt :all, "Show all results (include soft-deleted prs)", default: false

      opt :start, "Start date (List PRs linked on or after date)", short: :none, type: :string
      opt :end, "End date (List PRs linked on or before date)", short: :none, type: :string

      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :quiet, "Run with minimal output", default: false
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    if ARGV.include?("create")
      ensure_table_exists!
    elsif ARGV.empty?
      list
    elsif ARGV.first == "console" || ARGV.first == "c"
      run_command "sqlite3 #{DATABASE_PATH}"
    end
  end

  def ensure_table_exists!
    puts "CREATING TABLE WOOO"
    DB.create_table?(:pr_history, if_not_exists: true) do
      primary_key :id
      String :repo, null: false
      String :branch, null: false
      Integer :pr, null: false
      DateTime :created_at
      DateTime :updated_at
      DateTime :deleted_at
    end
  end

  def list
    repo = git_repo_for(Dir.pwd)

    pr_query = PrHistory.where(repo:).order(*(names? ? [:branch] : [:updated_at, :id]))
    pr_query = pr_query.where(deleted_at: nil) unless all?
    prs = pr_query.all


    if prs.empty?
      puts "No PRs found for repo '#{repo}'"
    else
      head = [ "Branch", "PR", "Updated" ]
      head << "Deleted" if all?

      table = Text::Table.new
      table.head = head
      table.rows = []

      prs.each do |pr|
        row = [pr.branch, {value: pr.pr, align: :right}, pr.updated_at.strftime("%F %T") ]
        row << pr.deleted_at&.strftime("%F %T") if all?
        table.rows << row
      end

      puts table
    end
  end

  def pr_link(pr)

  end
end


if __FILE__ == $0
  Application.new.run
end
