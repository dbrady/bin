#!/usr/bin/env ruby

puts "This will migrate your local development and test databases."

def log(msg)
  puts "\033[32m#{msg}\033[0m"
end

# TODO: If I have just a seed migration or just a data migration, don't waste my
# time running the other one. I could run the are-migrations-current script
# twice; that would make this script take an extra 850ms on every no-op in order
# to save 7-9sec once a year or so. Yeah, I'm being stupid here.
#
# Okay, it could be a win if are-rails-migrations-current could exit with a
# status code, like 0 for success, 1 for schema migrations needed, 2 for seed
# migrations, 3 for both, etc. Then it would only need to run once and would
# save me that 7 seconds once a year. Given that dicking with my ops scripts is
# fun enough to make me completely discount the hours and hours of development
# cost, this is almost certainly going to be another one of my "terrible ideas,
# enthusiastically pursued".

force = ARGV.include?("-f") || ARGV.include?("--force")

if force || !system("are-rails-migrations-current")
  log "diespringdie --db"
  system "diespringdie --db"
  log "bin/rails db:migrate"
  system "bin/rails db:migrate"
  log "RAILS_ENV=test bin/rails db:migrate"
  system({"RAILS_ENV" => "test"}, "bin/rails db:migrate")
else
  log "Your schema migrations appear to be up to date."
end
