#!/usr/bin/env ruby

puts "This will migrate your local development and test databases."

def log(msg)
  puts "\033[32m#{msg}\033[0m"
end

# TODO: keep this stuff on the off chance that (shudder) I ever need to stay on
# top of developers retroactively changing the contents of schema files. I know,
# I know, it shouldn't ever happen, but then again I never thought my schema
# contents cache could be updated without migrations getting run.

# db_migrate_sha_file = File.expand_path("~/.last-db-migrate-sha")
# force = ARGV.include?("-f") || ARGV.include?("--force") || !File.exists?(db_migrate_sha_file)

# # load old sha
# old_sha = if !force
#             File.read(db_migrate_sha_file)
#           else
#             ""
#           end

# # calculate new sha
# new_sha = `db-migrate-sha`

# if old_sha != new_sha
#   log "bundle exec rails db:migrate"
#   system "bundle exec rails db:migrate"
#   log "RAILS_ENV=test bundle exec rails db:migrate"
#   system({"RAILS_ENV" => "test"}, "bundle exec rails db:migrate")

#   File.open(db_migrate_sha_file, "w") {|fp| fp.puts new_sha }
# else
#   puts "Migration folder contents have not changed since last run. Rerun with -f or --force to force remigration."
# end

force = ARGV.include?("-f") || ARGV.include?("--force")

if force || !system("are-rails-migrations-current")
  log "bundle exec rails db:migrate"
  system "bundle exec rails db:migrate"
  log "RAILS_ENV=test bundle exec rails db:migrate"
  system({"RAILS_ENV" => "test"}, "bundle exec rails db:migrate")
else
  log "Your schema migrations appear to be up to date."
end
