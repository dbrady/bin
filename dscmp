#!/usr/bin/env ruby
# dscmp <query> - Compare query results in both warehouses
#
# TODO: This --redshift="full query" --snowflake="full query" is very
# cumbersome. Maybe we could try something like this instead:
#
# --query="SELECT * FROM foo WHERE id=<id>" --redshift=42 --snowflake=13

require "colorize"
require "optimist"

opts = Optimist.options do
  banner <<HALP
dscmp - Compare query between redshift and snowflake

dscmp <options> --query="SELECT foo FROM bar WHERE blah"
dscmp <options> --query="SELECT blah FROM whatever WHERE id={ids}" --redshift=42 --snowflake=13
dscmp <options> --query="SELECT blah FROM whatever WHERE id IN ({ids})" --redshift="42, 43" --snowflake="13, 14

Options:
HALP
  opt :csv, "Emit output in csv format instead of datatables", default: false
  opt :finance, "Use finance warehouses", default: false
  opt :log, "Write query outputs to dscmp.{warehouse}.log", default: false
  opt :pretty, "Format table all pretty-like", default: false
  opt :query, "Query to use, use {ids} to fill from --redshift=value, --snowflake=value", type: :string, required: true

  opt :redshift, "Values to use in redshift", type: :string
  opt :snowflake, "Values to use in snowflake", type: :string
end


warehouses = if opts[:finance]
               %w(redshift_finance snowflake_finance)
             else
               %w(redshift snowflake)
             end

warehouses.each do |warehouse|
  # override query if given
  query = opts[:query]
  if opts[:redshift_given] && warehouse =~ /redshift/
    query = query.gsub(/{ids}/, opts[:redshift])
  elsif opts[:snowflake_given] && warehouse =~ /snowflake/
    query = query.gsub(/{ids}/, opts[:snowflake])
  end

  color = case warehouse
          when /redshift/ then :light_red
          when /snowflake/ then :cyan
          else :white
          end

  command = %Q(dsquery #{opts[:csv] ? '--csv ' : ''}--warehouse #{warehouse} --query "#{query}" | cleanup-whitespace #{opts[:pretty] ? "| snow-table" : ""})
  command += " | tee dscmp.#{warehouse}.csv" if opts[:log]
  puts (command  + " # #{warehouse}").send(color)
  system command
end
