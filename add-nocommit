#!/usr/bin/env ruby
# add-nocommit - add pre-commit git hook to prevent hacky commits
#
# This script creates pre-commit git hook that detects the text "NOCOMMIT" in
# the text. If found, git will abort the commit with a big warning message
# telling you that you have marked a file as being not committable. Use this for
# temporary hacks or secrets that must not be committed.
#
# Overrides:
# - Set ALLOW_NOCOMMIT=true to allow you to override all NOCOMMITs in a
# file. THIS IS EXACTLY AS DANGEROUS AS YOUR USAGE OF NOCOMMIT WAS IN THE FIRST
# PLACE. I use it for files like this one where NOCOMMIT appears as part of the
# intended source, not as a directive.
#
# - Put NOCOMMIT_IS_OK_HERE on a line with NOCOMMIT to disable for THAT line.
#
# Example:
#
# # NOCOMMIT: Hacks
# x / 0 # NOCOMMIT: This is probably a bad idea
#
# You can override this by ALSO adding NOCOMMIT_IS_OK_HERE to THE SAME line.
#
# Example:
#
# def mark_line_as_nocommit(message)
#     puts '# NOCOMMIT: #{message}' # NOCOMMIT_IS_OK_HERE
# end
#
# Installation:
#     With this script in your path, cd to the root of your project
# and run "add-nocommit". This will create the magical pre-commit
# file.
#
# Usage:
#     Just add a comment like:
#
# NOCOMMIT: this file has sensitive data / is bogus / etc!
#
# and if you forget and accidentally git add the file, the commit will
# fail, showing you the file and line containing the NOCOMMIT message.

def barf!(msg=nil)
  puts "*** add-nocommit: %s " % msg if msg
  exit -1
end

precommit_folder = "./.git/hooks"
precommit_file = "%s/pre-commit" % precommit_folder

barf! "Pardon me, but I'm lost. Is this a git repo? I don't see .git/hooks/ here!" unless File.directory? precommit_folder
if !ARGV.include?("-f") && !ARGV.include?("--force")
  barf! "Cowardly refusing to overwrite existing pre-commit hook!" if File.exist? precommit_file
end

File.open(precommit_file, 'w') do |file|
  file.puts DATA.read
end
system("chmod a+x #{precommit_file}")

__END__
#!/usr/bin/env ruby

# git-hook to check for NOCOMMIT messages in code that has been staged and abort
# the commit if found.
#
# To use: copy this file into your .git/hooks folder as pre-commit and make sure
# it is executable (chmod +x pre-commit). Now in your code, type // NOCOMMIT or
# # NOCOMMIT in a line and save it -- usually with an explanatory message like
# "# NOCOMMIT -- temp hack for bug #123".  Git will still let you stage the file
# with git add, but it will stop you from committing the file until you remove
# the NOCOMMIT comment.
file = ""
delta = ""
line_num = 0
`git diff-index -p -M --cached HEAD`.each_line do |line|
  file = line.sub(/^....../, '') if line =~ /^(---|\+\+\+) (a|b)\//
  if line =~ /^@@ [\-\+\,\d\s]+ @@$/
    delta = line.rstrip
    if line =~ /\d \+(\d+),\d/
      line_num = $1.to_i - 1
    else
      line_num = 0
    end
  else
    line_num += 1 if line !~ /^- /
  end

  if ENV.["ALLOW_COMMIT"] != true &&
     !line.start_with?("-") &&          # don't stop me from DELETING a NOCOMMIT
     line =~ %r{NOCOMMIT} &&
     line !~ /NOCOMMIT_IS_OK_HERE/
    puts <<BANNER
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!                                                                           !!!
!!!  ##    ##   ####     ####     ####   ##    ## ##    ##   ####   ########  !!!
!!!  ###   ## ##    ## ##    ## ##    ## ###  ### ###  ###    ##       ##     !!!
!!!  ####  ## ##    ## ##       ##    ## ## ## ## ## ## ##    ##       ##     !!!
!!!  ## ## ## ##    ## ##       ##    ## ##    ## ##    ##    ##       ##     !!!
!!!  ##  #### ##    ## ##       ##    ## ##    ## ##    ##    ##       ##     !!!
!!!  ##   ### ##    ## ##    ## ##    ## ##    ## ##    ##    ##       ##     !!!
!!!  ##    ##   ####     ####     ####   ##    ## ##    ##   ####      ##     !!!
!!!                                                                           !!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!                                                                           !!!
!!!                                                                           !!!
!!!           COMMIT ABORTED: You are staging a file with NOCOMMIT!           !!!
!!!                                                                           !!!
!!!                                                                           !!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

BANNER
    puts "In file: #{file}"
    puts "In delta #{delta} near line #{line_num}:"
    puts line
    exit 1
  end
end

  # Check to see if we're on master
branch=`git current-branch`.strip
main_branch=`git main-branch`.strip

def log_line(msg="")
  puts "\033[1;37;41m#{msg}\033[0m"
end

if branch == main_branch
  width = [30, branch.size + 8].max
  log_line "".center(width)
  log_line "STOP!!!".center(width)
  log_line "".center(width)
  log_line "YOU ARE ON A MAIN BRANCH!".center(width)
  log_line "".center(width)
  log_line branch.center(width)
  log_line "".center(width)
  log_line "STOP TRYING TO COMMIT THIS!".center(width)
  log_line "".center(width)
  exit 1
end

exit 0
