#!/usr/bin/env ruby
# rubanner - print a message with color
# rubanner [options] "message" [color [color2]]
#
# Example:
# rubanner "Cool Banner"
# rubanner "To Boldly Go" bold # black on white
# rubanner "This is bad" light_white on_red # light_white == bold
# rubanner "CoverMyMeds" --font=nancyj-improved bold red on_light_yellow # any colorize color string
#
# TODO:
# rubanner [options] "message" [options] --extra ["message2" [options]] [--extra [...]]
#
# e.g. our company logo could be approximated with:
# rubanner "Cover" on_light_white --font=nancyj-improved bold light_yellow \
#          --extra "My" bold light_red \
#          --extra "Meds" bold light_yellow

# Options:
# -f font_name, --font=font_name

# TODO: fiddle with colors inline. Would love to be able to say --left-background=light_yellow --right-background=light_red
# TODO: composed messages. Would LOVE to be able to say
#     rubanner Cover bold light_yellow on_light_white \
#              My bold light_red on_light_white \
#              Meds bold light_yellow on_light_white

require 'io/console'
require 'colorize'

class Rubanner
  attr_reader :args, :output, :screen_width, :font, :message, :colors

  DEFAULT_FONT = "roman"

  def initialize(argv)
    @args = argv.dup
    @output = init_output
    @screen_width = init_screen_width
    @font = init_font
    @message = init_message
    @colors = init_colors
  end

  def init_output
    if idx = args.index('-o')
      args.delete_at idx
      File.open(args.delete_at(idx), 'w')
    else
      $stdout
    end
  end

  def init_screen_width
    if idx = args.index('-w')
      args.delete_at(idx)
      args.delete_at(idx).to_i
    else
      # Must supply -w to pipe to a file but if you DO
      # pipe $stdout.winzie will ASPLODE
      $stdout.winsize[1]
    end
  end

  def init_font
    if idx = args.index('-f')
      args.delete_at idx
      args.delete_at idx
    elsif idx = args.index {|arg| arg =~ /^--font=/ }
      args.delete_at(idx).split(/=/)[1]
    else
      DEFAULT_FONT
    end
  end

  def init_message
    args.shift
  end

  def init_colors
    args.empty? ? ['bold', 'on_blue'] : args
  end

  def run
    # render message and calculate padding
    screen_width.inspect

    banner = `figlet -w #{screen_width} -d ~/bin/figlet-fonts -f "#{font}" "#{message}"`
    banner_width = banner.each_line.to_a.first.chomp.length
    left_size = (screen_width - banner_width) / 2
    right_size = screen_width - (banner_width + left_size)

    lpad = ' ' * left_size
    rpad = ' ' * right_size

    # Okay, calculations done, here comes the output!
    blank_line
    banner.each_line do |line|
      output.puts colorize("#{lpad}#{line.chomp}#{rpad}", colors)
    end
  end

  def colorize(text, colors)
    colors.reduce(text) {|t, color| t.send color }
  end

  def blank_line
    output.puts colorize("#{' ' * screen_width}", colors)
  end
end

if __FILE__==$0
  Rubanner.new(ARGV).run
end
