#!/usr/bin/env ruby
# rubanner - print a message with color
# (This is a straight port of rubanner to the optimist gem)
# rubanner [options] "message" [color [color2]]
#
# Example:

# TODO: Have an optional ~/.rubanner.yml file, with defaults: font, fg_color, bg_color, and style (dim|bold|normal)

# TODO: load defaults from ~/.rubanner.yml if present, otherwise keep hardcodes
DEFAULTS = {
  font: "dos-rebel",
  bg_color: "light_blue",
  fg_color: "white",
  bold: true,
  clear_screen: false,
}

require 'colorize'
require 'io/console'
require 'optimist'
require 'yaml'

String.disable_colorization unless $stdout.tty?

class Rubanner
  attr_reader :messages, :colors, :output, :screen_width, :font, :clear_screen, :debug

  def initialize(messages:, colors:, output:, screen_width:, font:, clear_screen:, debug:)
    @output = output
    @screen_width = screen_width
    @font = font
    @messages = Array(messages)
    @colors = colors
    @clear_screen = clear_screen
    @debug = debug
  end

  def run
    ensure_figlet_installed!

    # render messages and calculate padding
    screen_width.inspect

    messages.each do |message|
      command = %Q|figlet -w #{screen_width} -d ~/bin/figlet-fonts -f "#{font}" "#{message}"|
      puts command if debug
      banner = `#{command}`
      banner_lines = banner.each_line.to_a
      banner_lines.pop while (banner_lines.size > 0 && banner_lines.last.strip.empty?)
      banner_lines.shift while (banner_lines.size > 0 && banner_lines.first.strip.empty?)
      banner = banner_lines.join

      banner_width = banner_lines.map {|line| line.chomp.length }.max || 0
      left_size = (screen_width - banner_width) / 2
      right_size = screen_width - (banner_width + left_size)

      lpad = ' ' * left_size
      rpad = ' ' * right_size

      # Okay, calculations done, here comes the output!
      blank_line
      banner.each_line do |line|
        output.puts colorize("#{lpad}#{line.chomp}#{rpad}", colors)
      end
      blank_line
    end
  end

  def ensure_figlet_installed!
    raise NotImplementedError.new("figlet is not supported on this system -- please install it and try again") unless system("which figlet > /dev/null")
  end

  # double-dispatch from command-line args to colorize gem, e.g.
  # colorize("pants", ["bold", "red", "on_blue"]) -> "pants".bold.red.on_blue
  def colorize(text, colors)
    colors.reduce(text) {|t, color| t.send color }
  end

  def blank_line
    output.puts colorize("#{' ' * screen_width}", colors)
  end
end

if __FILE__==$0
  font_folder = File.join(File.dirname(__FILE__), "figlet-fonts")

  opts = Optimist.options do
    banner <<-BANNER
rubanner - print a banner message with color

rubanner [<options>] message

Options:
    BANNER
    opt :debug, "Show extra debug help and info", default: false

    opt :font, "Font (must be installed in #{font_folder})", type: :string, default: DEFAULTS[:font]
    opt :fg, "Foreground color", short: "g", type: :string, default: DEFAULTS[:fg_color]
    opt :bg, "Background color", type: :string, default: DEFAULTS[:bg_color]
    opt :bold, "bold", short: "B", type: :boolean, default: DEFAULTS[:bold]
    opt :output, "Output File", type: :string, default: nil
    opt :screen_width, "Screen Width (specify when using --output)", type: :integer, default: nil
    opt :clear_screen, "Clear Screen before printing banner", type: :boolean, default: DEFAULTS[:clear_screen]
    opt :width, "Use this screen width", type: :integer
  end
  puts opts.inspect if opts[:debug]

  opts[:output] ||= $stdout
  opts[:screen_width] ||= if opts[:width_given]
                            opts[:width]
                          elsif $stdout.tty?
                            $stdout.winsize[1]
                          else
                            100
                          end

  messages = ARGV
  opts[:bg] = opts[:bg].start_with?("on_") ? opts[:bg] : "on_" + opts[:bg]
  colors = [opts[:fg], opts[:bg]]
  colors << "bold" if opts[:bold]

  Rubanner.new(
    messages: messages,
    colors: colors,
    output: opts[:output],
    screen_width: opts[:screen_width],
    font: opts[:font],
    clear_screen: opts[:clear_screen],
    debug: opts[:debug]
  ).run
end
