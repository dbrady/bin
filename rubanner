#!/usr/bin/env ruby
# rubanner - print a message with color
# rubanner [options] "message" [color [color2]]
#
# Example:
# rubanner "Cool Banner"
# rubanner "To Boldly Go" bold # black on white
# rubanner "This is bad" light_white on_red # light_white == bold
# rubanner "CoverMyMeds" --font=nancyj-improved bold red on_light_yellow # any colorize color string
#
# TODO:
# rubanner [options] "message" [options] --extra ["message2" [options]] [--extra [...]]
#
# e.g. the CoverMyMeds logo could be approximated with:
# rubanner "Cover" on_light_white --font=nancyj-improved bold light_yellow \
#          --extra "My" bold light_red \
#          --extra "Meds" bold light_yellow

# Options:
# -f font_name, --font=font_name

# TODO: fiddle with colors inline. Would love to be able to say --left-background=light_yellow --right-background=light_red
# TODO: composed messages. Would LOVE to be able to say
#     rubanner Cover bold light_yellow on_light_white \
#              My bold light_red on_light_white \
#              Meds bold light_yellow on_light_white

require 'io/console'
require 'colorize'
require 'yaml'

class Rubanner
  attr_reader :args, :output, :screen_width, :app, :font, :message, :colors

  # load_default_font will try to load a font name from ~/.rubanner.yml; if it
  # fails will fall back to this hardcoded font.
  DEFAULT_FONT = "electronic"
  CONFIG_FILE = File.expand_path("~/.rubanner.yml")

  # Dear Past Me,
  #
  # I know back in December 2016 when you started this that you wanted to prove
  # "we can write an app class that parses its own args without using the
  # trollop/optimist gem" but it's really turned into a love letter to that
  # gem. Refactor me to use clean args, please.
  #
  # Now I concede that I usually put the argument parsing down at the bottom in
  # the "if __FILE__==$0" block and that can get super messy. If you want to try
  # having the app class parse its own arguments, try moving it in here. Except
  # that functionality will immediately beg to be extracted. So, okay... perhaps
  # have an "Optimister" class that either wraps Optimist generically, or
  # presents an interface that this app can know about.
  #
  # Alternately, there is value in doing `head scriptfile` and seeing the
  # beginnings of the usage and arguments. So maybe keep `Rubanner.new.run if
  # __FILE__==$0` down at the bottom, but have another if FILE block up at the
  # top just for parsing args.
  #
  # Love, Future Me
  # Saratoga Springs, November 2021

  def initialize(argv)
    @args = argv.dup
    @output = init_output
    @screen_width = init_screen_width
    @app = init_app
    @font = init_font(app)
    @message = init_message
    @colors = init_colors
  end

  def init_output
    if idx = args.index('-o')
      args.delete_at idx
      File.open(args.delete_at(idx), 'w')
    else
      $stdout
    end
  end

  def init_screen_width
    if idx = args.index('-w')
      args.delete_at(idx)
      args.delete_at(idx).to_i
    else
      # Must supply -w to pipe to a file but if you DO
      # pipe $stdout.winzie will ASPLODE
      $stdout.winsize[1]
    end
  end

  def init_app
    app = if idx = args.index('-a')
            args.delete_at idx
            args.delete_at idx
          elsif idx = args.index {|arg| arg =~ /^--app=/ }
            args.delete_at(idx).split(/=/)[1]
          end
    app&.to_sym
  end

  def init_font(app)
    if idx = args.index('-f')
      args.delete_at idx
      args.delete_at idx
    elsif idx = args.index {|arg| arg =~ /^--font=/ }
      args.delete_at(idx).split(/=/)[1]
    else
      load_default_font(app) || DEFAULT_FONT
    end
  end

  def load_default_font(app)
    if File.exists?(CONFIG_FILE)
      config = YAML::load_file(CONFIG_FILE)
      config.fetch(app,{}).fetch(:font, config[:default_font])
    end
  end

  def init_message
    args.shift
  end

  def init_colors
    args.empty? ? ['bold', 'on_blue'] : args
  end

  def ensure_figlet_installed!
    raise NotImplementedError.new("figlet is not supported on this system -- install it maybe") unless system("which figlet > /dev/null")
  end

  def run
    ensure_figlet_installed!

    # render message and calculate padding
    screen_width.inspect

    banner = `figlet -w #{screen_width} -d ~/bin/figlet-fonts -f "#{font}" "#{message}"`
    banner_width = banner.each_line.to_a.first.chomp.length
    left_size = (screen_width - banner_width) / 2
    right_size = screen_width - (banner_width + left_size)

    lpad = ' ' * left_size
    rpad = ' ' * right_size

    # Okay, calculations done, here comes the output!
    blank_line
    banner.each_line do |line|
      output.puts colorize("#{lpad}#{line.chomp}#{rpad}", colors)
    end
  end

  def colorize(text, colors)
    colors.reduce(text) {|t, color| t.send color }
  end

  def blank_line
    output.puts colorize("#{' ' * screen_width}", colors)
  end
end

if __FILE__==$0
  Rubanner.new(ARGV).run
end
