#!/usr/bin/env ruby
# git-log-branch [<path/to/repo>] - Record current branch of repo.
# Log history is kept in ~/bin/db/git-settings.db
#

# TODO: Update to dbrady_cli. This is from before the dbrady_cli lib

require 'colorize'
require 'optimist'
require 'extralite'

SHARE_FOLDER = File.expand_path('~/bin/db')
DATABASE_PATH = File.join(SHARE_FOLDER, 'git-settings.db')

LOG_COLOR_INFO=:white
LOG_COLOR_QUERY=:cyan
LOG_COLOR_PRINT=:normal

class GitBranchLogger
  def initialize(opts)
    @opts = opts

    log "opts: #{@opts.inspect}"
  end

  def opts; @opts; end
  def debug?; opts[:debug]; end
  def drop?; opts[:drop]; end
  def print?; opts[:print]; end

  # Log a message if --debug option is passed.
  # Call with force: true to make it always print, debug or no.
  def log(msg, color: LOG_COLOR_INFO, force: false)
    return unless force || debug?

    timestamp = DateTime.now.strftime("%F %T")
    message = "%s: %s" % [timestamp, msg.send(color)]
    puts message
  end

  # Log a message if --print option is passed.
  def print(msg)
    return unless print?

    timestamp = DateTime.now.strftime("%F %T")
    message = "%s: %s" % [timestamp, msg]

    puts message if print?
  end

  def db
    @db ||= Extralite::Database.new DATABASE_PATH
  end

  def load_most_recent_branch_for(path)
    db.query("SELECT branch FROM branch_history WHERE path=? ORDER BY created_at DESC LIMIT 1;", path) do |row|
      return row[:branch]
    end
  end

  def log_branch(path, branch)
    log "Recording branch '#{branch}' for path '#{path}'"
    if branch == 'in'
      log_error_branch(path, branch)
      return
    end

    db.execute "INSERT INTO branch_history (path, branch) VALUES (?, ?);", path, branch
  end

  def log_error_branch(path, branch)
    File.open(File.expand_path("~/bin/db/git-log-branch-errors.log"), "a") do |fp|
      message = "#{Time.now.strftime('%F %T')} Branch name is messed up: path: #{path}, branch: #{branch} (current branch: #{git_current_branch})"
      fp.puts message
    end
  end

  def drop_table
    log "Dropping table branch_history"
    db.execute "DROP TABLE IF EXISTS branch_history;"
  end

  def ensure_table_exists
    log "Creating table branch_history"
    db.execute <<~SQL
        CREATE TABLE IF NOT EXISTS branch_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT
            , path VARCHAR(1024) NOT NULL
            , branch VARCHAR(256) NOT NULL
            , created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        );
    SQL
  end

  # Return true if path contains a .git/ folder or a .git file (specific instance of a submodule)
  # Duplicate code in git-branch-history and git-log-branch. Is it make-a-git-tools-gem o'clock yet?
  def is_git_repo?(path)
    File.exist?(File.join(path, '.git'))
  end

  # Walk up file tree looking for a .git folder
  # Duplicate code in git-branch-history and git-log-branch. Is it make-a-git-tools-gem o'clock yet?
  def git_repo_for(path)
    attempts_remaining = 10
    while !path.empty?
      attempts_remaining -= 1
      raise "CANNOT FIGURE OUT PATH FOR #{path.inspect}" unless attempts_remaining > 0
      return path if is_git_repo?(path)
      path = File.split(path).first
    end
  end

  def run
    path = git_repo_for(File.expand_path(ARGV.last || Dir.pwd))
    if !is_git_repo?(path)
      print "No git repo detected in #{path} or ancestors. Not logging."
      exit 0
    end

    drop_table if drop?
    ensure_table_exists

    current_branch = `(cd #{path} && git current-branch)`.strip
    last_branch = load_most_recent_branch_for(path)

    if last_branch != current_branch
      print "last_branch was #{last_branch.inspect}, current_branch is #{current_branch}; logging this branch." if debug?
      print "Logging branch: #{path.inspect} is on #{current_branch.inspect}"
      log_branch(path, current_branch) if last_branch != current_branch
    else
      log "last_branch and current_branch are both #{current_branch}. Not logging." if debug?
    end
    print "current_branch: #{current_branch}"
  end
end

opts = Optimist.options do
  opt :debug, "Enable extra debugging", default: false
  opt :drop, "Drop and recreate database", default: false
  opt :print, "Output path and branch to stdout", default: false
end

puts opts.inspect if opts[:debug]

GitBranchLogger.new(debug: opts[:debug], drop: opts[:drop], print: opts[:print]).run
