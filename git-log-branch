#!/usr/bin/env ruby
# git-log-branch <path/to/repo> - Record current branch of repo in that repo's .git/branch.log
# ideally set this up to run
require 'colorize'
require 'optimist'
require 'extralite'

# blegh. I gotta set up a clean host/container share...
SHARE_FOLDER =  if ENV['IS_DOCKER_LOCAL'] == "1" then
            File.expand_path('/root/data_services_package/dataservices/haxx')
          else
            File.expand_path('/Users/davidbrady/acima/devel/data_services_package/dataservices/haxx')
          end

DATABASE_PATH = File.join(SHARE_FOLDER, 'git-branch-history.db')

LOG_INFO=:white
LOG_QUERY=:cyan
LOG_PRINT=:normal

class GitBranchLogger
  def initialize(opts)
    @opts = opts

    log "opts: #{@opts.inspect}"
  end

  def opts; @opts; end
  def debug?; !!opts[:debug]; end
  def drop?; !!opts[:drop]; end
  def print?; !!opts[:print]; end

  def log(msg, level: LOG_INFO, force: false)
    puts msg.send(level) if force || debug?
  end

  def print(msg)
    puts msg if print?
  end

  def db
    @db ||= Extralite::Database.new DATABASE_PATH
  end

  def load_most_recent_branch_for(path)
    db.query("SELECT branch FROM branch_history WHERE path=? ORDER BY created_at DESC LIMIT 1;", path) do |row|
      return row[:branch]
    end
  end

  def log_branch(path, branch)
    log "Recording branch '#{branch}' for path '#{path}'"
    db.execute "INSERT INTO branch_history (path, branch) VALUES (?, ?);", path, branch
  end

  def drop_table
    log "Dropping table branch_history"
    db.execute "DROP TABLE IF EXISTS branch_history;"
  end

  def ensure_table_exists
    log "Creating table branch_history"
    db.execute <<~SQL
        CREATE TABLE IF NOT EXISTS branch_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT
            , path VARCHAR(1024) NOT NULL
            , branch VARCHAR(256) NOT NULL
            , created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        );
    SQL
  end

  # Return true if path contains a .git/ folder or a .git file (specific instance of a submodule)
  # Duplicate code in git-branch-history and git-log-branch. Is it make-a-git-tools-gem o'clock yet?
  def is_git_repo?(path)
    File.exist?(File.join(path, '.git'))
  end

  # Walk up file tree looking for a .git folder
  # Duplicate code in git-branch-history and git-log-branch. Is it make-a-git-tools-gem o'clock yet?
  def git_repo_for(path)
    oh_noes = 10
    while !path.empty?
      oh_noes -= 1
      raise "CANNOT FIGURE OUT PATH FOR #{path.inspect}" unless oh_noes > 0
      return path if is_git_repo?(path)
      path = File.split(path).first
    end
  end

  def run
    path = git_repo_for(File.expand_path(ARGV.last || Dir.pwd))
    exit 0 unless is_git_repo?(path)

    drop_table if drop?
    ensure_table_exists

    current_branch = `(cd #{path} && git current-branch)`.strip
    last_branch = load_most_recent_branch_for(path)


    if last_branch != current_branch
      puts "last_branch was #{last_branch.inspect}, current_branch is #{current_branch}; logging" if debug?
      print "Logging branch: #{path.inspect} is on #{current_branch.inspect}"
      log_branch(path, current_branch) if last_branch != current_branch
    end

  end
end

opts = Optimist.options do
  opt :debug, "Enable extra debugging", default: false
  opt :drop, "Drop and recreate database", default: false
  opt :print, "Output path and branch to stdout", default: false
end

puts opts.inspect if opts[:debug]

GitBranchLogger.new(debug: opts[:debug], drop: opts[:drop], print: opts[:print]).run
