#!/usr/bin/env ruby
# snow-new-branch <ticket> <path/to/job.py> - git new-branch in both repos
require "colorize"

$force = false

def usage
  puts <<USAGE
snow-new-branch <ticket> [path/to/job.py] - create new snowflake branches in both repos.

If given a job filename, sets ~/.ds-script first.
USAGE
end

def get_script
  return $get_script if $get_script

  $get_script = `get-ds-script`.strip
  $get_script = ENV['SCRIPT'] if $get_script.empty?
  $get_script
end

def job_name
  get_script.gsub('/', '.').sub(/.py$/, '')
end

def get_all_branches
  `git branch -a`.each_line.to_a.map { |branch| branch.gsub(/^\s*\*\s*/, '').strip }
end

# If I forget to update SCRIPT and it's set to the previous job's work, there
# will already be a branch for it in github. I check for this here and make
# myself fix it by hand--usually just involving updating SCRIPT.
def make_sure_script_is_current!(ticket_id)
  # tl;dr if script is set but git branch -a contains the ticket id or job name, raise a warning
  return unless get_script
  return if $force

  branches = get_all_branches

  if problem_branch = branches.detect {|branch| branch.include?(ticket_id) || branch.include?(job_name) }
    raise "ERROR: Cowardly refusing to create new snowflake tickets for #{job_name} because I found an existing branch called #{problem_branch}."
  end
end


# ----------------------------------------------------------------------
# Start of main script
# ----------------------------------------------------------------------

if ARGV.include?("-h") || ARGV.include?("--help")
  usage
  exit 0
end

if ARGV.include?("-f") || ARGV.include?("--force")
  $force = true
  ARGV -= ["-f", "--force"]
end

if ARGV.first.to_i.zero?
  puts "Argument must be a ticket id"
  usage
  exit -1
end

if ARGV.size != 1 && ARGV.size != 2
  puts "Expected 1-2 arguments, got #{ARGV.size}"
  usage
  exit -1
end

filename = if ARGV.size == 2
             system "set-ds-script", ARGV[1]
           else
             get_script
           end

ticket = ARGV.first
filename = get_script
warehouse_dir = File.expand_path("~/data_services/etl/warehouse")

puts "This will create new branches in the warehouse and finance called feature/DS-#{ticket}/#{job_name}"
puts "Are you sure? Hit Ctrl-C to abort, ENTER to continue:"
$stdin.gets

make_sure_script_is_current! ticket

if Dir.pwd != warehouse_dir
  puts "ERROR: Must be run from the warehouse dir."
  puts "warehouse_dir: #{warehouse_dir.inspect}"
  puts "      Dir.pwd: #{Dir.pwd.inspect}"
  exit -1
end

if !File.exists?(filename)
  puts "ERROR: file '#{filename}' does not exist"
  exit -1
end

job_name = filename.sub(%r|/|, '.').sub(/\.py$/, '')

command = "git checkout feature/snowflake-moveover && git pull && git new-branch #{ticket} #{job_name}"

system command
Dir.chdir("finance") do
  system command
end

puts "Script is at:"
puts `get-ds-script -f`.rstrip.bold.white.on_green
