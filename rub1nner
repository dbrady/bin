#!/usr/bin/env ruby
# rub1nner - Print a colorized banner, 1 line high (so no fonts)
#
# rub1nner [-l|-r|-c] [-B|--bold] -f <color> -b <on_color> "<line1>" ["line2" [...]]
#
require "colorize"
require "io/console"
require "optimist"
String.disable_colorization unless $stdout.tty?

_height,width = $stdout.tty? ? $stdout.winsize : [24, 100]

opts = Optimist.options do
  opt :debug, "Print extra debugging info", default: false
  opt :foreground, "Foreground color, e.g. red, light_black", default: "white"
  opt :background, "Background color, e.g. blue, light_green", default: "magenta"
  opt :left, "Align text to the left"
  opt :right, "Align text to the right"
  opt :center, "Align text to the center (default: true unless -l or -r specified)"
  opt :padding, "Number of spaces to pad text", type: :int, default: 1
  opt :vpadding, "Number of lines to vertically pad banner", type: :int, default: 1
  opt :bold, "Use bold text", short: :B, default: false
end
puts opts.inspect if opts[:debug]

messages = ARGV.dup

colorization = {
  color: opts[:foreground].to_sym,
  background: opts[:background].to_sym,
  mode: opts[:bold] ? :bold : :normal
}
puts colorization.inspect if opts[:debug]

# These checks are here more to remind me how to use the script than to protect
# me from trying to pack little Bobby Tables into the arguments before flinging
# them at my Kernel with String.send.
Optimist::die :color, "Color must be a valid color name, e.g. 'blue' or 'light_magenta'" unless String.colors.include?(opts[:foreground].to_sym)
Optimist::die :background, "Background must be a valid background color name, e.g. 'cyan' or 'light_green'" unless String.colors.include?(opts[:background].to_sym)
Optimist::die :alignment, "You must specify at most one of --left, --right, or --center" if (opts[:left] && opts[:right]) || (opts[:left] && opts[:center]) || (opts[:center] && opts[:right])

align_method = :center
align_method = :ljust if opts[:left]
align_method = :rjust if opts[:right]

padding = ' ' * opts[:padding]

padding_bar = "".send(align_method, width).colorize(colorization)

# Top padding
# line1
# line2
# Bottom padding

opts[:vpadding].times { puts padding_bar }
messages.each do |message|
  line = "#{padding}#{message}#{padding}".send(align_method, width).colorize(colorization)
  puts line
end
opts[:vpadding].times { puts padding_bar }
