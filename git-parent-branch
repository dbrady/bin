#!/usr/bin/env ruby
# git-parent-branch - Get or associate a parent branch with a branch
#
# TODO: Standardize the git-tool naming. The other tools have e.g. git-get-pr
# and git-set-pr. This wants to be both, so I have to remember that this one is
# "git-parent-branch set <branch>" and "git-parent-branch [get]"
require "colorize"
require "extralite"
require "optimist"
require "text-table"
require_relative "lib/dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli

  opt_flag :deleted
  opt_flag :name

  DATABASE_PATH = File.expand_path('~/bin/db/git-settings.db')

  def run
    @opts = Optimist.options do
      banner <<BANNER
git-parent-branch - Get or associate a parent branch with a branch

git parent-branch set <parent> [<branch>] - set parent branch to branch
git parent-branch [<branch>] - get parent branch
git parent-branch list - list all branches
git parent-branch go - go to parent branch
git parench-branch unset - unset parent branch (reverts to master)

If branch is omitted, assumes current branch.
BANNER

      opt :deleted, "Include deleted branches when listing all branches", short: :D, default: false
      opt :name, "List by name when listing all branches", default: false

      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :quiet, "Run with minimal output", default: false
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    # APP CODE GOES HERE
    ensure_table_exists

    repo = git_repo_for Dir.pwd

    command = ARGV.first

    case command
    when "set"
      if ARGV.size == 3
        parent = ARGV[1]
        branch = ARGV[2]
      elsif ARGV.size == 2
        parent = ARGV[1]
        branch = git_current_branch
      else
        puts "Could not parse ARGV: set <parent> [<branch>]"
        exit -1
      end

      create_parent_branch repo, parent, branch
    when "list"
      get_all_branches_for_repo(repo)
    when "diff"
      parent_branch = git_parent_branch
      current_branch = git_current_branch
      run_command "git diff #{parent_branch}..#{current_branch}"
    when "go"
      branch = git_parent_branch
      run_command "go '#{branch}'"
    when "unset"
      unset_parent_branch repo, git_current_branch
    else # get
      case ARGV.size
      when 0
        branch = git_current_branch
      when 1
        branch = ARGV[1]
      else
        puts "ARGV must have 1 or 0 args <branch> or current branch if omitted"
        exit -1
      end

      parent_branch = get_parent_branch(repo, branch)
      parent_branch = get_command_output("git main-branch", quiet: true) if parent_branch.nil? || parent_branch.empty?
      puts parent_branch
    end
  end

  def db
    @db ||= Extralite::Database.new DATABASE_PATH
  end

  def execute(sql)
    puts sql.cyan if debug?
    db.execute sql unless pretend?
  end

  def query(sql, &block)
    puts sql.cyan if debug?
    db.query(sql) do |row|
      yield row if block_given?
    end
  end

  def ensure_table_exists
    sql = <<SQL
CREATE TABLE IF NOT EXISTS parent_branches (
  id INTEGER NOT NULL PRIMARY KEY,
  repo TEXT NOT NULL,
  branch TEXT NOT NULL,
  parent TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  deleted_at TIMESTAMP DEFAULT NULL
)
SQL

    execute sql
  end

  def create_parent_branch(repo, parent, branch)
    return if get_parent_branch(repo, branch) == parent

    # Delete any old parents
    unset_parent_branch(repo, branch)

    # Set this one
    sql = "INSERT INTO parent_branches (repo, branch, parent) VALUES ('#{repo}', '#{branch}', '#{parent}')"
    execute sql
  end

  def unset_parent_branch(repo, branch)
    sql = "UPDATE parent_branches SET deleted_at=CURRENT_TIMESTAMP WHERE repo='#{repo}' AND branch='#{branch}' AND deleted_at IS NULL"
    execute sql
  end

  def get_parent_branch(repo, branch)
    sql = "SELECT parent FROM parent_branches WHERE repo='#{repo}' AND branch='#{branch}' AND deleted_at IS NULL ORDER BY created_at DESC LIMIT 1"
    query(sql) do |row|
      return row[:parent]
    end
  end

  def get_all_branches_for_repo(repo)
    delete_clause = deleted? ? "" : "AND deleted_at IS NULL"
    order_clause = name? ? "ORDER BY parent ASC, branch ASC" : "ORDER BY updated_at ASC"
    sql = "SELECT repo, branch, parent, updated_at, deleted_at FROM parent_branches WHERE repo='#{repo}' #{delete_clause} #{order_clause}"
    table = Text::Table.new
    table.head = ["updated_at", "deleted_at", "repo", "branch", "parent"]
    puts "Listing branches for #{repo}:"
    query(sql) do |row|
      table.rows << [row[:updated_at], row[:deleted_at], row[:repo], row[:branch], row[:parent]]
    end
    puts table
  end

end


if __FILE__ == $0
  Application.new.run
end
