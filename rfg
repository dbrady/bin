#!/usr/bin/env ruby
# rfg - "rspec go" run specs focused on a specific subset, set by rff ("rspec focus")
# TODO: Port this to DbradyCli
# TODO: Consider porting rfx to sqlite? Then relations like the current branch
#       name become usable as inflectors to choose the correct set of specs to run.
# TODO: I'm considering an equivalent set of apps/commands for rubocop. Refactor
#       to abstract out the application name? Or is that overkill?

# TODO: Use tee to catch pending and turn on warnings:
# (rspec | tee ~/.spec_output.log) || cifail
#
# Need to thread these together a bit:
# if rspec fails
#   cifail
# elif spec output matches ", 0 pending"
#   cipass
# else
#   ciwarn
#
# This is complicated enough to warrant my rewriting it in ruby. It can be done
# in bash but I'm already past the point of comfort and fluency in maintaining
# this script.
#
# TODO: Bring back the old, better version that parsed the RSpec output,
# e.g. if output includes /[1-9]+ failures/ cifail
# and if output include /[1-9]+ pending/ ciwarn
#
# ^^^ TODONT: But don't bother until I have a team that cares about warning-free
# specs. (And then, make it optional. I originally just cut this over rather
# than trying to make it bimodal.)

# TODO: Swap intelligently between bin/rspec and bundle exec rspec. On my
# current project, binstubs are smart enough to invoke bundle exec anyway, so
# the smart version might just be "favor bin/rspec if present, fall back to
# bundle exec rspec if there's a Gemfile, otherwise run bare rspec"

# if .spec_focus contains "rspec" it means I dumped the ENTIRE spec command in
# there, likely to prepend environment switches like SPEC_SEED=true. This is
# useful for env seeds but forces me to lock into bin/rspec or bundle exec
# rspec. For a one-off, that's fine. Especially since I also cut over from
# bundle exec rspec to bin/rspec.
#
# If not, assume spec_focus contains just the args to pass to bin/rspec
#
# TODO: If you put SPEC_SEED=true bin/rspec app/models/user_spec.rb, this will
# blow up trying to execute the command `SPEC_SEED=true`. Right now this is
# manually overridable with `SPEC_SEED=true rfg`. To make this work the way I
# want, I might want to port this to ruby and either port spec_foci to a
# database (like sqlite3 db in the newly-minted ~/bin/db folder) or have ruby
# split the spec_focus around the rspec command, and anything in front of it, of
# the form X=Y, gets rolled up into a custom argument to system, like
# `system(custom_env, rspec_command, args)`

# usage:
#
# rfg [additional args or focus--will not change focus]

# TODO: if spec_focus contains "rspec", it's the full command, which I use when
# I need to force an env var like SPEC_SEED=true

# TODO: Feature (may require rewriting in ruby?)
# IFF:
#   1. There is exactly one cmd line argument
#   2. That argument is not a path (contains no /'s)
#   3. That argument is not an option (does not begin with -)
#   4. That argument exists as one of the loadable specs in rfload
# THEN:
#   rfload $1 && rfg
# ELSE:
#   # pass arguments directly to rspec as normal
#   bin/rspec $@

require "colorize"
require "optimist"
require_relative "dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli

  def run
    @opts = Optimist.options do
      banner <<BANNER
rfg [<options>] [additional args or focus--will not change focus]

See Also: rfh to see extended help

Options:
BANNER
      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :quiet, "Run with minimal output", default: false
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    puts "Rspec Focus: Go! (rff - Focus; rfg - Go; rfc - Clear; rfe - Edit; rfv - View; rfh - Help)"
    puts "Running focused specs"

    focus = File.readlines(File.expand_path("~/.spec_focus")).map(&:strip).join('')

    run_specs best_rspec_command(focus)
  end

  def best_rspec_command(focus)
    if focus =~ /\brspec\b/
      puts "~/.spec_focus explicitly invokes rspec, honoring full command"
      ["time", focus].join(' ') unless focus =~ /^\s*time\s/
    else
      puts "~/.spec_focus does not explicitly invoke rspec, using bin/rspec"
      best_rspec = if File.exist?(File.join(Dir.pwd, "bin/rspec"))
                     "bin/rspec"
                   else
                     "bundle exec rspec"
                   end
      full_command = ['time', best_rspec, focus].join(" ")
    end
  end

  def run_specs(command)
    run_command "cirun"
    if run_command(command)
      run_command "cipass"
    else
      run_command "cifail"
      exit -1
    end
  end
end


if __FILE__ == $0
  Application.new.run
end
