#!/usr/bin/env ruby
# rfg - "rspec go" run specs focused on a specific subset, set by rff ("rspec focus")
# DONE: Port this to DbradyCli
# TODO: Consider porting rfx to sqlite? Then relations like the current branch
#       name become usable as inflectors to choose the correct set of specs to run.
# TODO: I'm considering an equivalent set of apps/commands for rubocop. Refactor
#       to abstract out the application name? Or is that overkill?
# TODO: Use tee to catch pending and turn on warnings:
# (rspec | tee ~/.spec_output.log) || cifail
#
# Need to thread these together a bit:
# if rspec fails
#   cifail
# elif spec output matches ", 0 pending"
#   cipass
# else
#   ciwarn
#
# This is complicated enough to warrant my rewriting it in ruby. It can be done
# in bash but I'm already past the point of comfort and fluency in maintaining
# this script.
#
# TODO: Bring back the old, better version that parsed the RSpec output,
# e.g. if output includes /[1-9]+ failures/ cifail
# and if output include /[1-9]+ pending/ ciwarn
#
# ^^^ TODONT: But don't bother until I have a team that cares about warning-free
# specs. (And then, make it optional. I originally just cut this over rather
# than trying to make it bimodal.)
#
# TODO: Favor bin/rspec over bundle exec rspec over rspec. bin/rspec honors
# Spring which cuts about 20s off the spec startup time (which is 3x longer than
# the maximum time I tolerate on specs!)
#
# DONE: Let's support SPEC_SEED=true. "-s/--seed" should add SPEC_SEED=true to
# the env before calling.

# TODO: if spec_focus contains "rspec", it's the full command, which I use when
# I need to force an env var like SPEC_SEED=true

# TODO: Feature (may require rewriting in ruby?)
# IFF:
#   1. There is exactly one cmd line argument
#   2. That argument is not a path (contains no /'s)
#   3. That argument is not an option (does not begin with -)
#   4. That argument exists as one of the loadable specs in rfload
# THEN:
#   rfload $1 && rfg
# ELSE:
#   # pass arguments directly to rspec as normal
#   bin/rspec $@

require "colorize"
require "optimist"
require_relative "dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli

  opt_flag :seed, :fail_fast
  opt_reader :profile

  def run
    @opts = Optimist.options do
      banner <<BANNER
rfg [<options>] [additional args or focus--will not change focus]

See Also: rfh to see extended help

Options:
BANNER
      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :quiet, "Run with minimal output", default: false

      opt :seed, "Run specs with SPEC_SEED=true (for work)", default: false
      opt :fail_fast, "Pass --fail-fast to rspec", default: false
      opt :profile, "Pass --profile <num> to rspec", type: :int
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    puts "Rspec Focus: Go! (rff - Focus; rfg - Go; rfc - Clear; rfe - Edit; rfv - View; rfh - Help)"
    puts "Running focused specs"

    focus = File.readlines(File.expand_path("~/.spec_focus")).map(&:strip).join('')

    run_specs best_rspec_command(focus)
  end

  def best_rspec_command(focus)
    command = if focus =~ /\brspec\b/
                puts "~/.spec_focus explicitly invokes rspec, honoring full command"
                ["time", focus].join(' ') unless focus =~ /^\s*time\s/
              else
                puts "~/.spec_focus does not explicitly invoke rspec, using bin/rspec"
                best_rspec = if File.exist?(File.join(Dir.pwd, "bin/rspec"))
                               "bin/rspec"
                             else
                               "bundle exec rspec"
                             end
                ['time', best_rspec, focus].join(" ")
              end
    command = [command , rspec_flags].join(' ')
  end

  def rspec_env
    env = {}
    env["SPEC_SEED"] = "true" if seed?
    env
  end

  def rspec_flags
    flags = []
    flags << "--profile=#{profile}" if profile
    flags << "--fail-fast" if fail_fast?
    flags
  end

  def run_specs(command)
    run_command "cirun", quiet: true
    if run_command(command, env: rspec_env)
      run_command "cipass", quiet: true
    else
      run_command "cifail", quiet: true
      exit -1
    end
  end
end


if __FILE__ == $0
  Application.new.run
end
