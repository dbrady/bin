#!/usr/bin/env ruby
# mp-make-merge-announcement - "Done with preflight, merging [id](url) to master"
require "colorize"
require "optimist"
require_relative "lib/dbrady_cli"
String.disable_colorization unless $stdout.tty?

# TODO:
# - [X] Connect this to slorks so it can include the PR title
# - [ ] Now that we can read slorks, also get the PR# if not provided
#       E.g. mp-make-merge-announcement IU-1767 would look up IU-1767, see that
#       it is PR 14572, and proceed. Print a happy error message.

class Application
  include DbradyCli

  opt_flag :no_done

  def run
    @opts = Optimist.options do
      banner <<-BANNER
mp-make-merge-announcement [options] [board-ticket:pr ...]

Example:
  mp-make-merge-announcement  # gets info from current branch
  mp-make-merge-announcement COR-1117:13604 COR-1119:13605
  mp-make-merge-announcement COR-1117 COR-1119 # gets PR# from slork (RDD, NOT IMPLEMENTED)

Options:
      BANNER
      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :quiet, "Run with minimal output", default: false
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    prs = []

    if ARGV.empty?
      board, ticket = get_board_and_ticket_from_branch
      repo, pr = get_repo_and_pr_from_branch
      prs << {board:, ticket:, repo:, pr:} if board && ticket && repo && pr
    else
      repo, _ = opts[:repo] || get_repo_and_pr_from_branch
      # ARGV is like COR-1117:13604 COR-1119:13605 etc
      ARGV.each do |arg|
        board, ticket, pr = arg.split(/[-:]/)
        prs << {board:, ticket:, repo:, pr:} if board && ticket && pr
      end
    end

    if prs.empty?
      puts "Could not determine board, ticket, repo or PR from args or branch. Hint: Write them like COR-2061:13950 ATD-999:12345"
    else
      message = message_for(prs)
      puts message.yellow
      IO.popen('pbcopy', 'w') { |f| f << message } && puts("Copied to clipboard.")
    end
  end

  def get_pr_url(repo, pr)
    "https://github.com/acima-credit/#{repo}/pull/#{pr}"
  end

  def get_pr_title(repo, pr)
    get_command_output("gh-get-pr-title #{repo} #{pr}", quiet: true).gsub(/\[.+\]\s*/, '')
  end

  def link_for(board, ticket, pr_url, title)
    if title.include? "#{board}-#{ticket}"
      "[#{title}](#{pr_url})"
    else
      "[#{board}-#{ticket}: #{title}](#{pr_url})"
    end
  end

  def message_for(prs)
    puts prs.inspect if debug?
    links = prs.map { |pr| link_for(pr[:board], pr[:ticket], get_pr_url(pr[:repo], pr[:pr]), get_pr_title(pr[:repo], pr[:pr])) }
    if links.size > 1
      last = links.pop
      links[-1] += " and #{last}"
    end
    links = links.join(", ")

    "Merging #{links} to master."
  end
end

if __FILE__ == $0
  Application.new.run
end
