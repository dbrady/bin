#!/usr/bin/env ruby
# dsetl_nightly <script> - run specific job
# TODO: Because snowflake, check for script in current branch!
require 'colorize'

argv=ARGV.dup

force = if argv & ['-f', '--force']
          argv -= ['-f', '--force']
          true
        end

# ENV['IS_DOCKER_LOCAL'] will be "1" (as a string) if we're in docker
if ENV['IS_DOCKER_LOCAL'].to_i.zero?
    puts "Must be run from inside the docker container."
    exit -1
end

def get_script
  return $get_script if $get_script

  $get_script = `get-ds-script`.strip
  $get_script = ENV['SCRIPT'] if $get_script.empty?
  $get_script
end

# Set to true to rewrite command line for pretty screenshots
def pretty_screenshots?
  false
end

if get_script.empty?
    echo 'ERROR: SCRIPT is not set; run set-ds-script <path/to/job.py>'
    exit -1
end

job_name = get_script.sub(%r|^.*/|, '').sub(/\.py$/, '')
branch_name = `git current-branch`.strip
finance_branch_name = `(cd ~/data_services/etl/warehouse/finance && git current-branch)`.strip

if Dir.pwd !~ %r|data_services/etl/warehouse$|
  puts "*** SNOWFLAKE WARNING: YOU ARE NOT IN THE WAREHOUSE ***".bold.light_white.on_red
  exit -1
end

if !branch_name.include?(job_name)
  if !force
    puts "*** SNOWFLAKE WARNING: BRANCH DOES NOT CONTAIN JOB NAME ***".bold.light_white.on_red
    puts "job_name: #{job_name}"
    puts "branch_name: #{branch_name}"
    puts
    puts "If you are sure you meant to do this, fire it off manually with"
    puts "python etl_nightly.py --retry_count 1 --job #{get_script}"
    exit -1
  end
end

# if branch_name != finance_branch_name
#   str =<<BRANCH_WARNING
# WARNING: warehouse and finance branches do not match. Is that OK?
# Warehouse: #{branch_name}
# Finance: #{finance_branch_name}
# BRANCH_WARNING
#   puts str.yellow
# end

# Move up 1 line (1F) and erase to EOL (0K) so the command screenshots correctly
print "\033[1F\033[0K# " if pretty_screenshots?

command = "python etl_nightly.py --retry_count 1 --job #{get_script} #{argv.join(' ')}"
puts command.cyan
system command
