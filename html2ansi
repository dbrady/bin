#!/usr/bin/env ruby
# html2ansi - emit ansi color code for an html color
#
# html2ansi <css_or_html_color>

# TODO: Here's a fun thing. Different terminal programs calibrate the color
# cubes differently. Pretty sure there's no way to autocalibrate the colors,
# especially with iTerm letting you slide a contrast value to clobber part of
# the color wheel, etc. This sounds like a problem for Future Me.

def usage
  str =<<USAGE
html2ansi - emit ansi color code for an html color

html2ansi <color>

color must be 3- or 6-digit rgb colors (css or html colors without the #)

Example:

html2ansi 00ff00 ffff00
=> 00ff00 is closest to ansi color 46
=> ffff00 is closest to ansi color 226

echo -e "\\x1b[38;5;46;48;5;226mYour text here\\x1b[0m"
\x1b[38;5;46;48;5;226mYour text here\x1b[0m

html2ansi f00
=> f00 is closest to ansi color 196
echo -e "\\x1b[38;5;196mYour text here\\x1b[0m"
\x1b[38;5;196mYour text here\x1b[0m
USAGE
end

def barf!(msg)
  puts msg
  puts "Run html2ansi --help for help"
  exit -1
end

def distance(r1,g1,b1,r2,g2,b2)
  (r2-r1)**2 + (g2-g1)**2 + (b2-b1)**2
end

# Okay, the 256-color ansi color space is divided up as follows:
# (TL;dr run ansicolors256 here in this repo to see the palette)
#   0- 15 - original 3 and 4 bit ansi colors
#  16-231 - 6x6x6 rgb color cube
# 232-255 - extended grayscale palette.

# On my Ubuntu 16.04 linux laptop running Terminal, 16 is black and 231 is
# white, and the 232-255 grayscale just barely fall inside those. 232 is just
# baaaaarely visible as not-black, and 255 is just barely dimmer than 231.

# TODO: For now, I'm going to ignore everything outside the color cube because
# calibrating grays is soooo haaaaard and I am soooo laaaaazy.

if __FILE__==$0
  if ARGV.size.zero? || ARGV.first == "--help"
    puts usage
    exit 0
  end

  color = ARGV.first

  if color.length != 3 && color.length != 6
    barf! "Color must be a 3-digit or 6-digit css/html color code, eg f89 or 2bac59"
  end

  if color !~ /^[0-9A-Fa-f]+$/
    barf! "Color must be a hexadecimal value"
  end

  red, green, blue = if color.length == 3
                       color.each_char.map {|c| "#{c}#{c}".to_i(16) }
                     else
                       color.each_char.each_slice(2).map {|c| c.join.to_i(16) }
                     end

  # now scale red 0..255 to 0..5
  red /= 51
  green /= 51
  blue /= 51

  puts "red: #{red}"
  puts "green: #{green}"
  puts "blue: #{blue}"

  ansi_colors = {}
  nearest = nil
  best_distance = nil

  (0..5).each do |r|
    (0..5).each do |g|
      (0..5).each do |b|
        index = 16 + r*36 + g*6 + b
        ansi_colors[index] = [r,g,b]
        dist = distance(red, green, blue, r, g, b)

#        puts "#{r},#{g},#{b}-->#{red},#{green},#{blue} = #{dist}"

        if nearest.nil? || dist < best_distance
          nearest = [index]
          best_distance = dist
        elsif dist == best_distance
          nearest << index
        end
      end
    end
  end

  if nearest.size > 1
    puts "Found multiple colors, all equidistant to #{color}:"
  else
    puts "Nearest color to #{color}:"
  end

  fg_black = "38;5;16"
  fg_white = "38;5;231"
  bg_black = "48;5;16"
  bg_white = "48;5;231"

  puts
  nearest.each do |color_index|
    puts "color_index: #{color_index}"

    # okay, let's print:
    #  color on black
    #  black on color
    #  color on white
    #  white on color

    [
      ["38;5;#{color_index}", bg_black, "This is #{color_index} on black"],
      [fg_black, "48;5;#{color_index}", "This is black on #{color_index}"],
      ["38;5;#{color_index}", bg_white, "This is #{color_index} on white"],
      [fg_white, "48;5;#{color_index}", "This is white on #{color_index}"],
    ].each do |fg, bg, label|
      on_code = "[#{fg};#{bg}m"
      puts "#{label}: \x1b#{on_code}Nearest color to #{color} is #{color_index}: print this with \\x1b#{on_code} TEXT \\x1b[0m\x1b[0m"
    end
  end

  puts

  # swatch
  4.times do
    puts "\x1b[48;5;#{nearest.first}m                \x1b[0m"
  end
  puts "\x1b[48;5;#{nearest.first}m     \x1b[38;5;16mSWATCH     \x1b[0m"
  puts "\x1b[48;5;#{nearest.first}m     \x1b[38;5;231mSWATCH     \x1b[0m"
  4.times do
    puts "\x1b[48;5;#{nearest.first}m                \x1b[0m"
  end
end
