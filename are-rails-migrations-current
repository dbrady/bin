#!/usr/bin/env ruby
# are-rails-migrations-current - examine schema_migrations table vs db/migrate/
# folder, and potentially seed_migrations vs db/data/older, but without starting
# rails because ain't nobody got time for that
#
# returns successful exit code to bash if migrations are current to allow
# chaining this command from remigrate and other scripts

# TODO: 2021-11-11 found an edge case where tests wouldn't run but migrations
# looked current. I think I must have run migrations, and not run them in the
# test environment. Workaround: I just ran `remigrate -f` and it forced a
# remigrate, but if this happens again and often enough, maybe add `def
# test_database_name`, query those migrations as well, and change `unrun =
# (planned - executed)` to `unrun = (planned - (executed_dev + executed_test))`
#
# UPDATE: The edge case is that the development migrations are up-to-date but
# the test migrations are out of sync. This script only checks the dev
# database. Can get into this state by testing a migration PR in development and
# not running the rollback after testing.

# TODO: 2022-03-08 I just found a great alternative use for this generic notion
# of "connect to the rails database but without loading rails". Extract this out
# to common/shareable code?
require 'pg'

def database_name(env: "development")
  folder = Dir.pwd.split(/\//).last

  db_name = case env
            when "development"
              case folder
              when "merchant_portal" then "merchant_portal_development"
              when "underwriting" then "underwriting_development_leases"
              when "credit_card_service" then "credit_card_development"
              end
            when "test"
              case folder
              when "merchant_portal" then "merchant_portal_test"
              when "underwriting" then "underwriting_test_leases"
              when "credit_card_service" then "credit_card_test"
              end
            end

  db_name ||= "#{folder}_#{env}"
end

def seed_migrations_tablename
  folder = Dir.pwd.split(/\//).last
  case folder
  when "merchant_portal" then "seed_migrations"
  when "underwriting" then "seed_migration_data_migrations"
  when "credit_card_service" then nil
  else
    "seed_migrations"
  end
end

quiet = ARGV.include?("-q") || ARGV.include?("--quiet")

def missing_migrations(conn, folder, table)
  return [] unless table # some projects don't have a seed migrations table

  planned_migrations = []
  executed_migrations = []
  conn.exec( "SELECT version FROM #{table}" ) do |result|
    executed_migrations = result.map {|row| row["version"].to_i}
  end

  migration_files = Dir.glob(File.join(folder, "*.rb"))
  migration_file_map = Hash[ migration_files.map {|file| [file.sub(%r|^#{folder}/|, '').to_i, file] }]
  planned_migrations = migration_file_map.keys

  unrun_migrations = planned_migrations - executed_migrations

  migration_file_map.keep_if {|key, value| unrun_migrations.include?(key) }
end

# TODO: put connection info somewhere it doesn't go into this repo but also
# doesn't require starting rails to extract. Maybe don't use this script at all
# if your development database creds involve secure secrets.
conn = PG.connect( dbname: database_name )

unrun_migrations = missing_migrations(conn, "./db/migrate", "schema_migrations")
unrun_seed_migrations = missing_migrations(conn, "./db/data", seed_migrations_tablename)

def bright(string)
  "\033[1;37m#{string}\033[0m"
end

def red(string)
  "\033[31m#{string}\033[0m"
end

def green(string)
  "\033[32m#{string}\033[0m"
end

if unrun_migrations.any? || unrun_seed_migrations.any?
  if !quiet
    migration_count_text = (unrun_migrations.size == 1) ? "migration has" : "#{unrun_migrations.size} migrations have"
    seed_migration_count_text = (unrun_seed_migrations.size == 1) ? "seed migration has" : "#{unrun_seed_migrations.size} seed migrations have"
    if unrun_migrations.any?
      puts bright("The following #{migration_count_text} NOT been run:")
      puts unrun_migrations.values
    end
    if unrun_seed_migrations.any?
      puts bright("The following #{seed_migration_count_text} NOT been run:")
      puts unrun_seed_migrations.values
    end
  end
  exit 1
else
  # all migrations are current, exit successfully
  puts green("All migrations are current.") if __FILE__==$0
  exit 0
end
