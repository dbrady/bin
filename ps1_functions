#!/usr/bin/env bash

# ======================================================================
# ps1_functions
#
# Originally stol^H^H^H^Hcopied from .rvm/contrib, which I sort of
# feel entitled to do since I helped Wayne write the original version
# of this script. Well, I watched him do it, at any rate. :-)
# Excellent bash programming tutorial video here:
# http://vimeo.com/21538711
#
# Why I'm forking it: I'm now working on a company laptop where I need
# my git config to show my company name/email when I'm working on
# company projects, but my personal name/email when I'm working on
# personal stuff.
# ======================================================================

#
# Source this file in your ~/.bash_profile or interactive startup file.
# This is done like so:
#
#    [[ -s "$HOME/.rvm/contrib/ps1_functions" ]] &&
#      source "$HOME/.rvm/contrib/ps1_functions"
#
# Then in order to set your prompt you simply do the following for example
#
# Examples:
#
#   ps1_set --prompt ∫
#
#   or
#
#   ps1_set --prompt ∴
#
# This will yield a prompt like the following, for example,
#
# 00:00:50 wayneeseguin@GeniusAir:~/projects/db0/rvm/rvm  (git:master:156d0b4) [wayne@rvm.example.com]  ruby-1.8.7-p334@rvm
# ∴
#
ps1_titlebar()
{
  case $TERM in
    (xterm*|rxvt*)
      printf "%s" "\033]0;\\u@\\h: \W\\007"
      ;;
  esac
}

ps1_identity()
{
  if (( $UID == 0 )) ; then
    printf "%s" "\[\033[31m\]\\u\[\033[0m\]@\[\033[36m\]\\h\[\033[35m\]:\w\[\033[0m\] "
  else
    printf "%s" "\[\033[32m\]\\u\[\033[0m\]@\[\033[36m\]\\h\[\033[35m\]:\w\[\033[0m\] "
  fi
}

ps1_git()
{
  local branch="" sha1="" line="" attr="" color=0

  shopt -s extglob # Important, for our nice matchers :)

  command -v git >/dev/null 2>&1 || {
    printf " \033[1;37m\033[41m[git not found]\033[m "
    return 0
  }

  branch=$(git symbolic-ref -q HEAD 2>/dev/null) || return 0 # Not in git repo.
  branch=${branch##refs/heads/}

  # Now we display the branch.
  sha1=$(git rev-parse --short --quiet HEAD)

  case "${branch:-"(no branch)"}" in
      production|prod)                            attr="1;37m\033[" ; color=41 ;; # bold white on red
      master|develop|dev|development|deploy|main) attr="1;37m\033[" ; color=41 ;; # bold white on red
      stage|staging)                              color=33 ;; # yellow
      next)                                       color=36 ;; # gray
      *)
          if [[ -n "${branch}" ]] ; then # Happiness! This is a feature/story branch :)
              color=32 # green
          else
              color=0 # reset
          fi
          ;;
  esac

  [[ $color -gt 0 ]] &&
    printf "\[\033[${attr}${color}m\](git:${branch}$(ps1_git_status):$sha1)\[\033[0m\] $(ps1_git_email) "
}

ps1_git_email()
{
    local hash_program="" attr="" fgcolor=0 bgcolor=0 color="" git_email="" hash=""

    git_email="$(git config --get user.email)"

    # Hash emails here only because this file is publicly visible ;-)
    hash_program="md5"
    command -v $hash_program >/dev/null 2>&1 || $hash_program="md5sum"
    hash=`echo ${git_email} | ${hash_program} | cut -f 1 -d ' '`
    prerendered=0

    # TODO: 2020-10-11 - Today I did 3 commits from the wrong email even though
    # it was colorized. Two thoughts about that: For now, just watch for it
    # (YAGNI: it might have been a one-off?) and if it happens again let's add a
    # path fragment for each email to belong to, and if it doesn't belong let's
    # freak right out, like bold white on bright red at a minimum, possibly even
    # blart an alarm to $stderr if possible?
    #
    # In the Interim: these were new repos that also needed add_nocommit to be
    # run on them. I wonder if I could change git clone to emit a reminder
    # and/or the same in add_nocommit (I forgot to run add_nocommit too until
    # later, so eh.)
    #
    # IF IT HAPPENS AGAIN but isn't merged, git rebase -i
    # <commit_before_mistake> and change all of them to "edit", then do 'git
    # commit --amend author=blah <LOOK THIS UP, BUSY PAIRING>'
    case $hash in
        "1d0e58ecbd97780bb36f6db90a2b57ac") bgcolor=""   ; fgcolor="32"   ;; # shinybit - green
        "563e2af36b14b3c954f77e938469606b")
            git_email="\033[1;47;38;5;208mdbrady\033[0m\033[1;47;38;5;125m@\033[0m\033[1;47;38;5;208mcover\033[0m\033[1;47;38;5;125mmy\033[0m\033[1;47;38;5;208mmeds\033[0m"
            prerendered=1
            ;;
        "abf0f4f7072d77a68ccec42247fe1e4f") fgcolor="1;38;5;27"; bgcolor="48;5;15" ;; # kp - bold blue on white
        "745932c691e01f288d7b56625296afe8") fgcolor="1;38;5;15"; bgcolor="48;5;17" ;; # ks - bold white on blue
        "fdbc33b336274f0b0e65030f7e39d435") fgcolor="1;38;5;15"; bgcolor="48;5;33" ;; # acima - bold white on light blue
        # default
        *)                                  bgcolor=41   ; fgcolor="1;37" ;; # bold white on bright red
    esac

    if [[ 1 -eq $prerendered ]] ; then
        printf "%s" $git_email
    else
        if [[ -n "${bgcolor}" ]] ; then
            printf "\033[${fgcolor};${bgcolor}m%s\033[0m" $git_email
        else
            printf "\033[${fgcolor}m%s\033[0m" $git_email
        fi
    fi
}

ps1_git_status()
{
  local git_status="$(git status 2>/dev/null)"

  [[ "${git_status}" = *deleted* ]]                    && printf "%s" "-"
  [[ "${git_status}" = *Untracked[[:space:]]files:* ]] && printf "%s" "+"
  [[ "${git_status}" = *modified:* ]]                  && printf "%s" "*"
}

ps1_rvm()
{
  command -v rvm-prompt >/dev/null 2>&1 && printf "%s" " $(rvm-prompt) "
}

ps1_update()
{
  local prompt_char='$' separator="\n" notime=0

  (( $UID == 0 )) && prompt_char='#'

  while [[ $# -gt 0 ]] ; do
    local token="$1" ; shift

    case "$token" in
      --trace)
        export PS4="+ \${BASH_SOURCE##\${rvm_path:-}} : \${FUNCNAME[0]:+\${FUNCNAME[0]}()}  \${LINENO} > "
        set -o xtrace
        ;;
      --prompt)
        prompt_char="$1"
        shift
        ;;
      --noseparator)
        separator=""
        ;;
      --separator)
        separator="$1"
        shift
        ;;
      --notime)
        notime=1
        ;;
      *)
        true # Ignore everything else.
        ;;
    esac
  done

  if (( notime > 0 )) ; then
    PS1="$(ps1_titlebar)$(ps1_identity)$(ps1_git)$(ps1_rvm)${separator}${prompt_char} "
  else
    PS1="$(ps1_titlebar)\D{%H:%M:%S} $(ps1_identity)$(ps1_git)$(ps1_rvm)${separator}${prompt_char} "
  fi
}

ps2_set()
{
  PS2="  \[\033[0;40m\]\[\033[0;33m\]> \[\033[1;37m\]\[\033[1m\]"
}

ps4_set()
{
  export PS4="+ \${BASH_SOURCE##\${rvm_path:-}} : \${FUNCNAME[0]:+\${FUNCNAME[0]}()}  \${LINENO} > "
}

# WARNING:  This clobbers your PROMPT_COMMAND so if you need to write your own, call
#           ps1_update within your PROMPT_COMMAND with the same arguments you pass
#           to ps1_set
#
# The PROMPT_COMMAND is used to help the prompt work if the separator is not a new line.
# In the event that the separator is not a new line, the prompt line may become distorted if
# you add or delete a certian number of characters, making the string wider than the
# $COLUMNS + len(your_input_line).
#
# This orginally was done with callbacks within the PS1 to add in things like the git
# commit, but this results in the PS1 being of an unknown width which results in the prompt
# being distorted if you add or remove a certain number of characters. To work around this
# it now uses the PROMPT_COMMAND callback to re-set the PS1 with a known width of chracters
# each time a new command is entered. See PROMPT_COMMAND for more details.
#
ps1_set()
{
  PROMPT_COMMAND="ps1_update $@"
}

ps1_plain()
{
    PROMPT_COMMAND=""
    PS1="$(ps1_identity)\\$ "
}

ps1_bare()
{
    PROMPT_COMMAND=""
    PS1="\\$ "
}
