#!/usr/bin/env ruby
# term-birb - show a birb on the terminal
#
# term-birb 32 - show 32nd birb file in folder (will change when more birbs are saved)

# term-birb red - show birb file with "red" in the title. If more than one,
# chooses at random.

# term-birb red 3 - show 3rd birb file with "red" in the title


# Select image at random from directory
# Calculate cache image namef rom image filename and terminal resolution
# if image is in cache
#   read from cache into variable
# else
#   render image to variable
#   write variable to cache
# end
# print image from variable

PICTURES_FOLDER = File.join(File.expand_path('~'), "Pictures")
BIRBS_CACHE_FOLDER = File.join(File.expand_path('~'), "Documents", "refdox", "birbs_cache")

# Create bribs cache if needed (only need this once per laptop, but man when it crashes the error comes from a weird place)

Dir.mkdir(BIRBS_CACHE_FOLDER) unless Dir.exists?(BIRBS_CACHE_FOLDER)

def available_birbs(filter=nil)
  if filter
    Dir.glob(File.join(PICTURES_FOLDER, "birb*#{filter}*"))
  else
    Dir.glob(File.join(PICTURES_FOLDER, "birb*"))
  end
end

def pick_a_birb(filter=nil, index=nil)
  birb_files = available_birbs(filter)

  if index
    birb_files.at((index-1) % birb_files.size)
  else
    birb_files.sample
  end
end

# term-birb --help
# term-birb -?
if ARGV.size > 0 && ["halp", "--halp", "--help", "-h", "-?"].include?(ARGV.first.downcase)
  puts <<HALP
term-birb - show a birb onna termbinal

term-birb [<n>]     - show a random (or the nth) birb
term-birb owl [<n>] - show a random birb (or the nth) with owl in the name
term-birb list      - show numbered list of all the birbs
term-birb list owl  - show numbered list of all the birbs with owl in the name
term-birb HALP      - show dis halp message (also halp or --halp or -h or -? or --help)
HALP

  exit 0
end

# term-birb list
# term-birb list owl
if ARGV.size > 0 && ARGV.first == "list"
  available_birbs(ARGV[1]).each.with_index do |birb, index|
    puts "#{index+1}. #{birb}"
  end
  exit 0
end

filter, index = if ARGV.size == 2
                  [ARGV.first, ARGV.last.to_i]
                elsif ARGV.size == 1 && ARGV.first =~ /^\d+$/
                  [nil, ARGV.first.to_i]
                elsif ARGV.size == 1
                  [ARGV.first, nil]
                else
                  [nil, nil]
                end

srand(Time.now.to_i)
require 'io/console'
y,x = $stdout.winsize

birb_filepath = pick_a_birb(filter, index)

if birb_filepath.nil?
  puts "Could not find a birb matching filter \"#{filter}\"."
  exit 1
end

birb_filename = birb_filepath.split("/").last
cache_filename = "#{birb_filename}.#{x}x#{y}.ansi"

cache_filepath = File.join(BIRBS_CACHE_FOLDER, cache_filename)

if File.exists?(cache_filepath)
  puts File.read(cache_filepath)
else
  birb_ansi = `chafa #{birb_filepath}`
  File.open(cache_filepath, "w") { |fp| fp.puts(birb_ansi) }
  puts birb_ansi
end

# the cache file:
# - is in the cache folder instead of the birbs folder
# - has XxY.ansi appended to the filename where XxY is the current terminal resolution
#
# So:
# Picture File: /Users/david.brady/Pictures/birb_magenta_body.jpeg
# xy: 236x52
# Cache File: /Users/david.brady/Pictures/birb_cache/birb_magenta_body.jpeg.236x52.ansi

# command = chafa `ls ~/Pictures/birb* | select-random`
