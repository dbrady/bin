#!/usr/bin/env ruby
# term-birb - show a birb on the terminal


# TODO: port this to ruby, maybe? We want to select a birb pic at random and
# grind it to ascii-art using chafa. BUT! It would be lovely if there were a
# caching scheme that would cache the chafa generation to save on compute
# cycles. When firing up 20 terminals at the start of a massive SOA session you
# can watch the birbs render at about 300 baud.


# Select image at random from directory
# Calculate cache image namef rom image filename and terminal resolution
# if image is in cache
#   read from cache into variable
# else
#   render image to variable
#   write variable to cache
# end
# print image from variable
if ARGV.first =~ /^\d+$/
  srand(ARGV.first.to_i)
else
  srand(Time.now.to_i)
end

require 'io/console'
y,x = $stdout.winsize

PICTURES_FOLDER = File.join(File.expand_path('~'), "Pictures")
BIRBS_CACHE_FOLDER = File.join(File.expand_path('~'), "Documents", "refdox", "birbs_cache")

# TODO: let me pick a file maybe if ARGV.first isn't a number?
birb_filepath = Dir.glob(File.join(PICTURES_FOLDER, "birb*")).shuffle.first

birb_filename = birb_filepath.split("/").last
cache_filename = "#{birb_filename}.#{y}x#{x}.ansi"

cache_filepath = File.join(BIRBS_CACHE_FOLDER, cache_filename)

# puts birb_filepath
# puts birb_filename
# puts cache_filename
# puts cache_filepath
# exit 0
if File.exists?(cache_filepath)
  puts File.read(cache_filepath)
else
  birb_ansi = `chafa #{birb_filepath}`
  File.open(cache_filepath, "w") { |fp| fp.puts(birb_ansi) }
  puts birb_ansi
end

# the cache file:
# - is in the cache folder instead of the birbs folder
# - has XxY.ansi appended to the filename where XxY is the current terminal resolution
#
# So:
# Picture File: /Users/david.brady/Pictures/birb_magenta_body.jpeg
# xy: 236x52
# Cache File: /Users/david.brady/Pictures/birb_cache/birb_magenta_body.jpeg.236x52.ansi

# command = chafa `ls ~/Pictures/birb* | select-random`
