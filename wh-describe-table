#!/usr/bin/env python
# wh-describe-table - describe a table in the warehouse
#
# import argparse - you suck, argparse
import sys
from dataservices import db


def usage():
    print(f"""
wh-describe-table <warehouse> <table>

Warehouse:
  r, redshift
  s, snowflake
""")


if __name__ == '__main__':
    allowed_warehouses = {'r': 'redshift', 's': 'snowflake', 'd': 'dataservices'}

    # parser = argparse.ArgumentParser(description='Describe Table in Warehouse')
    # parser.add_argument('--warehouse', help='Warehouse (r or s)', default='s', required=False)
    # args, remaining_args = parser.parse_known_args()

    pretend = False
    quiet = False

    if "-p" in sys.argv:
        pretend = True
        sys.argv.remove("-p")

    if "-q" in sys.argv:
        quiet = True
        sys.argv.remove("-q")

    # I keep forgetting to specify the warehouse. Make the tool smarter.
    if len(sys.argv) == 2:
        print("No warehouse specified; assuming Snowflake.")
        table = sys.argv[1]
        warehouse = 's'
    else:
        warehouse = sys.argv[1]
        table = sys.argv[2]

    # Look up warehouse from shorthand
    warehouse = allowed_warehouses.get(warehouse, warehouse)

    if warehouse not in allowed_warehouses.values():
        print(f"Warehouse '{warehouse}' must be one of: {', '.join(allowed_warehouses.values())}")
        sys.exit(1)

    if not quiet:
        print(f"Warehouse: {warehouse}")
        print(f"Table: {table}")

    if warehouse == 'snowflake':
        table = table.upper()
    elif warehouse == 'redshift':
        table = table.lower()

    try:
        dbo = db.DB(warehouse)
        conn = dbo.connect(warehouse)

        query = f"SELECT ordinal_position, column_name, data_type, numeric_precision, numeric_scale FROM information_schema.columns WHERE table_name ILIKE '{table}' ORDER BY ordinal_position"
        if not quiet:
            print(f"\033[36m{query}\033[0m")
        if not pretend:
            results = dbo.query(query)
            dbo.commit()


            # TODO: interpret the results
            # IS_NULLABLE = No / NULL / FALSE : add "NOT NULL"
            # COLUMN_DEFAULT is not null : add "DEFAULT <value>" if numeric else "DEFAULT '<value>'"
            # DATA_TYPE
            #   TEXT - VARCHAR(<CHARACTER_MAXIMUM_LENGTH>)
            #   BOOLEAN - BOOLEAN
            #   NUMBER
            #     NUMERIC_PRECISION=38 && NUMERIC_SCALE=0 - NUMBER
            #     ELSE - DECIMAL(<NUMERIC_PRECISION>, <NUMERIC_SCALE>)
            #   FLOAT - DOUBLE PRECISION

            for row in results:
                print(row)

            # print()
            # query = f"SELECT COUNT(*) FROM {table}"
            # print(f"\033[36m{query}\033[0m")
            # results = dbo.query(query)
            # print(results[0][0])

    finally:
        dbo.close()
