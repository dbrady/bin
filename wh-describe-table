#!/usr/bin/env python
# wh-describe-table - describe a table in the warehouse

import argparse
import subprocess
import sys
from dataservices import db

def colorize(text):
    if sys.stdout.isatty():
        return f"\033[36m{text}\033[0m"
    else:
        return text

if __name__ == '__main__':
    allowed_warehouses = {'r': 'redshift', 's': 'snowflake', 'd': 'dataservices', 'rf': 'redshift_finance', 'sf': 'snowflake_finance'}

    parser = argparse.ArgumentParser(description='Describe Table in Warehouse')
    parser.add_argument('--warehouse', help='Warehouse (r or s)', required=False)
    parser.add_argument('--pretend', help='Pretend (just prints the dsquery)', action='store_true', required=False)
    parser.add_argument('--quiet', help='Quiet (suppress extra logging)', action='store_true', required=False)
    parser.add_argument('--table', help='Table to describe (uses last argv if omitted)', required=False)

    args, remaining_args = parser.parse_known_args()

    pretend = args.pretend
    quiet = args.quiet
    warehouse = args.warehouse or 'snowflake'
    table = args.table
    if table is None and len(remaining_args) == 0:
        table = subprocess.run("get-ds-table", capture_output=True, text=True).stdout.strip()
    else:
        table = remaining_args[0]

    # Look up warehouse from shorthand
    warehouse = allowed_warehouses.get(warehouse, warehouse)

    if warehouse not in allowed_warehouses.values():
        print(f"Warehouse '{warehouse}' must be one of: {', '.join(allowed_warehouses.values())}")
        sys.exit(1)

    if not quiet:
        print(f"Warehouse: {warehouse}")
        print(f"Table: {table}")

    try:
        dbo = db.DB(warehouse)
        conn = dbo.connect(warehouse)

        query = f"SELECT ordinal_position, LOWER(column_name), data_type, numeric_precision, numeric_scale FROM information_schema.columns WHERE table_name ILIKE '{table}' ORDER BY ordinal_position"
        if not quiet:
            print(colorize(query))
        if not pretend:
            results = dbo.query(query)
            dbo.commit()

            # TODO: interpret the results and/or generate a create statement
            # that would create a table identical to this one. ("CREATE TABLE x
            # LIKE y" hur hur hur. No wait. Dear Future Me: this actually is a
            # pretty big YAGNI for the Snowflake port. As of June 2023, the
            # tricky schemata are all ported. Any remaining coolifs assume other
            # db engines, which doesn't make sense for ds/python arch.)

            for row in results:
                print(row)

    finally:
        dbo.close()
