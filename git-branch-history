#!/usr/bin/env ruby
# git-branch-history - query and show history from db/git-settings.db

require "byebug"
require "colorize"
require "date"
require "extralite"
require "optimist"

# TODO: Add -c/--count <n> to get the last n entries
# TODO: If our dates are default and we go back 3 days and there are fewer than
# <minimum> branches, re-query --count <minimun>with order by date desc limit n

$has_tzinfo = true
begin
  # Broken on ruby 3.2.2 in MP because it depends on a conflicting version of concurrent-ruby
  require "tzinfo"
rescue LoadError
  $has_tzinfo = false
end

require_relative "lib/dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli
  DATABASE_PATH = File.expand_path('~/bin/db/git-settings.db')

  attr_reader :db

  opt_flag :console, :go, :journal, :log, :sort, :unique, :utc

  # TODO: opt_flag with rename? E.g.
  # opt_flag( line_numbers: :"line-numbers" )
  def line_numbers?
    opts[:"line-number"]
  end

  # this would be unnecessary if the tzinfo gem wasn't currently incompatible with my current ruby setup
  def convert_to_localtime_poro(time)
    puts "date commands have not been tested on and/or converted to linux".yellow unless osx?
    sign, hours, minutes = tz_offset.match(/([+-])(\d{2})(\d{2})/).captures
    hours = hours.to_i
    minutes = minutes.to_i
    days_offset = (hours*60 + minutes) / 1440.0
    time.public_send(sign, days_offset)
  end

  # when/if tzinfo isn't broken, this is the cleaaner version
  def convert_to_localtime_tzinfo(time)
    TZInfo::Timezone.get('America/Denver').utc_to_local(time)
  end

  def tz_offset
    puts "date commands have not been tested on and/or converted to linux".yellow unless osx?
    @tz_offset ||= get_command_output 'date "+%z"'
  end

  def local_tz_abbrev
    puts "date commands have not been tested on and/or converted to linux".yellow unless osx?
    @local_tz_abbrev ||= get_command_output 'date "+%Z"'
  end

  def convert_to_localtime(time)
    if $has_tzinfo
      convert_to_localtime_tzinfo(time)
    else
      convert_to_localtime_poro(time)
    end
  end

  def run
    @opts = Optimist::options do
      banner <<-USAGE
git-branch-history - query the branch history log

By default, gets the branch history of the current repo for last week

If --start is not given, assumes three days ago.
USAGE

      opt :start, "Start date", short: :none, type: :string
      opt :end, "End date", short: :none, type: :string
      opt :index, "Show just one branch at index n/-m (run a search, pick index)", type: :integer
      opt :"line-number", "Show line numbers (for subsequent --index calls)", short: :n, default: true
      opt :unique, "Show unique branches. Suppress branches that have already been mentioned", short: :u, default: false
      opt :sort, "Sort branches sorted alphabetically rather than by time", default: false

      opt :go, "Go to branch at index n/-m", default: false
      opt :console, "Connect to sqlite database instead of querying", default: false

      opt :log, "Show journal/log of branch changes", default: false
      opt :path, "Path to specific repo (defaults to current folder)", type: :string
      opt :journal, "Show all branches with switch times", default: false
      opt :utc, "Show times in UTC rather than local timezone", short: :U, default: false

      opt :debug, "Dump extra debug information (Also set --verbose to log query results)", short: :d, default: false
      opt :pretend, "Print queries but do not run them", default: false
      opt :verbose, "Be a bit extra chatty", default: false
      opt :quiet, "Run with minimal output (no line numbers or additional suggestions, overridden by -d/-v)", short: :q, default: false
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    if console?
      status = run_command "sqlite3 -table #{DATABASE_PATH}"
      exit status
    end

    opts[:path] = if opts[:path_given]
                    git_repo_for(File.expand_path(opts[:path]))
                  else
                    git_repo_for(Dir.pwd)
                  end

    puts "Path to repo is '#{opts[:path]}'" if debug?

    opts[:start] ||= (Date.today - 7).strftime("%F")
    opts[:end] ||= (Date.today + 2).strftime("%F")

    puts "Opts after processing: #{opts.inspect}" if debug?

    wheres = []
    wheres << "DATE(created_at) >= '#{opts[:start]}'" if opts[:start]
    wheres << "DATE(created_at) < '#{opts[:end]}'" if opts[:end]
    wheres << "path = '#{opts[:path]}'" if opts[:path]

    where = if wheres.empty?
              ""
            else
              where = "WHERE " + wheres.join(" AND ")
            end

    group = unique? ? "GROUP BY branch" : ""

    order = if sort?
              'branch'
            elsif log?
              'created_at'
            else
              'path, created_at'
            end

    puts "Opening database at: #{DATABASE_PATH}" if debug?
    @db = Extralite::Database.new(DATABASE_PATH)

    query = if journal?
              <<QUERY
SELECT path, branch, created_at FROM branch_history #{where} ORDER BY path, created_at #{group}
QUERY
            else
              <<QUERY
SELECT path, branch, created_at FROM branch_history #{where} #{group} ORDER BY #{order}
QUERY
            end

    query = query.rstrip
    repos = Hash.new {|h,k| h[k] = []}

    puts query.cyan if pretend? || verbose? || debug?

    if !pretend?
      db.query(query) do |row|
        puts row.inspect if debug? && verbose?
        repos[row[:path]] << row
      end
    end

    if repos.empty?
      db.query("SELECT path, branch, created_at FROM branch_history WHERE path = '#{opts[:path]}' ORDER BY created_at DESC LIMIT 1") do |row|
        repos[row[:path]] << row
      end
    end

    if repos.empty?
      puts "No repos found for query: #{where}"
    end

    if journal?
      repos.each_pair do |repo, branch_changes|
        puts "branch_changes: #{branch_changes.inspect}" if debug?
        puts repo.cyan
        branch_changes.each do |change|
          puts "    change: #{change.inspect}" if debug?
          puts "    #{change[:created_at]} #{change[:branch]}"
        end
      end
    else
      if opts[:index_given]
        branch = repos.values.first[opts[:index]].fetch(:branch)
        puts branch
        run_command "go #{branch}" if go?
      else
        repos.each_pair do |repo, rows|
          puts repo.cyan
          rows.each.with_index do |row, index|
            created_at_utc = DateTime.strptime(row[:created_at], "%F %T")
            created_at = if utc?
                           created_at_utc.strftime("%F %T %a UTC")
                         else
                           convert_to_localtime(created_at_utc).strftime("%F %T %a #{local_tz_abbrev}")
                         end
            line_num = (line_numbers? && !quiet?) ? "%2d " % index : ""
            puts "#{line_num}#{created_at}: #{row[:branch]}"
          end
        end
      end
    end
    puts "Use -gi <id> to go to an index" unless go? || quiet?
    # ----------------------------------------------------------------------
    # END MAIN
    # ----------------------------------------------------------------------
  end
end

if __FILE__ == $0
  Application.new.run
end
