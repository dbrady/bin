#!/usr/bin/env ruby
# git-branch-history - query and show history from db/git-settings.db
require "byebug"
require "colorize"
require "date"
require "extralite"
require "optimist"
$has_tzinfo = true
begin
  # Broken on ruby 3.2.2 in MP because it depends on a conflicting version of concurrent-ruby
  require "tzinfo"
rescue LoadError
  $has_tzinfo = false
end

require_relative "dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli
  DATABASE_PATH = File.expand_path('~/bin/db/git-settings.db')

  attr_reader :db

  opt_flag :prune
  opt_flag :journal
  opt_flag :utc
  opt_flag :console

  # TODO: Add a pruning option to clear out testing branches

  # Prune duplicate branches from repo. Doesn't happen often, shouldn't happen
  # ever, PITA to clean up from the console, so here's some code for you, Future
  # Me, if you eff things up again like I did today. Love, Past Me. Maybe if I
  # never use this again I can remove the --prune option.
  #
  # Also this is super rarely needed (I hope) so I'm giving you an n+1
  # query. Cache your own ids, I'm tired.
  def prune_branches(path, db)
    puts "pruning branches for #{path}..."
    last_branch = nil

    query = "SELECT id, branch FROM branch_history WHERE path='#{path}' ORDER BY created_at ASC"
    puts query.cyan if pretend? || verbose? || debug?
    db.query(query).each do |row|
      branch = row[:branch]
      if branch == last_branch
        puts "Deleting row: #{row.inspect}"
        db.execute("DELETE FROM branch_history WHERE id=?", row[:id]) unless pretend?
      else
        puts "Keeping row:  #{row.inspect}"
      end
      last_branch = branch
    end
  end

  # this would be unnecessary if the tzinfo gem wasn't currently incompatible with my current ruby setup
  def convert_to_localtime_poro(time)
    puts "date commands have not been tested on and/or converted to linux".yellow unless osx?
    sign, hours, minutes = tz_offset.match(/([+-])(\d{2})(\d{2})/).captures
    hours = hours.to_i
    minutes = minutes.to_i
    days_offset = (hours*60 + minutes) / 1440.0
    time.public_send(sign, days_offset)
  end

  # when/if tzinfo isn't broken, this is the cleaaner version
  def convert_to_localtime_tzinfo(time)
    TZInfo::Timezone.get('America/Denver').utc_to_local(time)
  end

  def tz_offset
    puts "date commands have not been tested on and/or converted to linux".yellow unless osx?
    @tz_offset ||= get_command_output 'date "+%z"'
  end

  def local_tz_abbrev
    puts "date commands have not been tested on and/or converted to linux".yellow unless osx?
    @local_tz_abbrev ||= get_command_output 'date "+%Z"'
  end

  def convert_to_localtime(time)
    if $has_tzinfo
      convert_to_localtime_tzinfo(time)
    else
      convert_to_localtime_poro(time)
    end
  end

  def run
    @opts = Optimist::options do
      banner <<-USAGE
git-branch-history - query the branch history log

By default, gets the branch history of the current repo for last week

If --start is not given, assumes three days ago.
USAGE

      opt :start, "Start date", short: :none, type: :string
      opt :end, "End date", short: :none, type: :string

      opt :console, "Connect to sqlite database instead of querying", default: false

      opt :log, "Show journal/log of branch changes", default: false
      opt :path, "Path to specific repo (defaults to current folder)", type: :string
      opt :journal, "Show all branches with switch times", default: false
      opt :utc, "Show times in UTC rather than local timezone", short: :U, default: false

      opt :debug, "Dump extra debug information (Also set --verbose to log query results)", short: :d, default: false
      opt :pretend, "Print queries but do not run them", default: false
      opt :verbose, "Be a bit extra chatty", default: false
      opt :prune, "Prune duplicate branches (shouldn't need to be done ever, let alone often, but sometimes I write bugs)", default: false
      opt :quiet, "Run with minimal output", default: false
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    if debug?
      puts "debug? #{debug?.inspect}"
      puts "verbose? #{verbose?.inspect}"
      puts "quiet? #{quiet?.inspect}"
      puts "prune? #{prune?.inspect}"
    end

    if console?
      status = run_command "sqlite3 #{DATABASE_PATH}"
      exit status
    end

    opts[:path] = if opts[:path_given]
                    git_repo_for(File.expand_path(opts[:path]))
                  else
                    git_repo_for(Dir.pwd)
                  end

    puts "Path to repo is '#{opts[:path]}'" if opts[:debug]

    opts[:start] ||= (Date.today - 3).strftime("%F")
    opts[:end] ||= (Date.today + 1).strftime("%F")

    puts "Opts after processing: #{opts.inspect}" if opts[:debug]

    wheres = []
    wheres << "DATE(created_at) >= '#{opts[:start]}'" if opts[:start]
    wheres << "DATE(created_at) < '#{opts[:end]}'" if opts[:end]
    wheres << "path = '#{opts[:path]}'" if opts[:path]

    where = if wheres.empty?
              ""
            else
              where = "WHERE " + wheres.join(" AND ")
            end

    order = opts[:log] ? 'created_at' : 'path, created_at'

    puts "Opening database at: #{DATABASE_PATH}" if opts[:debug]
    @db = Extralite::Database.new(DATABASE_PATH)

    prune_and_exit!(opts, db) if opts[:prune]

    query = if opts[:journal]
              <<QUERY
SELECT path, branch, created_at FROM branch_history #{where} ORDER BY path, created_at
QUERY
            elsif opts[:latest]
              <<QUERY
SELECT path, branch, MAX(created_at) AS newest_created_at FROM branch_history #{where} GROUP BY path ORDER BY path
QUERY
            else
              <<QUERY
SELECT path, branch, created_at FROM branch_history #{where} ORDER BY #{order}
QUERY
            end

    query = query.rstrip
    repos = Hash.new {|h,k| h[k] = []}

    puts query.cyan if pretend? || verbose? || debug?

    if !pretend?
      db.query(query) do |row|
        puts row.inspect if debug? && verbose?
        repos[row[:path]] << row
      end
    end

    if repos.empty?
      db.query("SELECT path, branch, created_at FROM branch_history WHERE path = '#{opts[:path]}' ORDER BY created_at DESC LIMIT 1") do |row|
        repos[row[:path]] << row
      end
    end

    if repos.empty?
      puts "No repos found for query: #{where}"
    end

    if opts[:journal]
      repos.each_pair do |repo, branch_changes|
        puts "branch_changes: #{branch_changes.inspect}" if opts[:debug]
        puts repo.cyan
        branch_changes.each do |change|
          puts "    change: #{change.inspect}" if opts[:debug]
          puts "    #{change[:created_at]} #{change[:branch]}"
        end
      end
    else
      repos.each_pair do |repo, rows|
        puts repo.cyan
        rows.each do |row|
          created_at_utc = DateTime.strptime(row[:created_at], "%F %T")
          created_at = if utc?
                         created_at_utc.strftime("%F %T %a UTC")
                       else
                         convert_to_localtime(created_at_utc).strftime("%F %T %a #{local_tz_abbrev}")
                       end
          puts "    #{created_at}: #{row[:branch]}"
        end
      end
    end
    # ----------------------------------------------------------------------
    # END MAIN
    # ----------------------------------------------------------------------
  end
end


# prune_and_exit! - Clean up duplicate branches. Shouldn't happen ever. Doesn't happen often. Pain in the ass to clean up.
# --prune - clean up duplicate branchs from current repo
# --prune --all - clean up duplicates in all branches
def prune_and_exit!(opts, db)
  paths = if opts[:all]
            query = "SELECT path FROM branch_history GROUP BY path ORDER BY path"
            puts query.cyan if pretend? || verbose? || debug?
            db.query(query).map {|row| row[:path]} unless pretend?
          else
            Array(opts[:path])
          end

  paths.each do |path|
    prune_branches(path, db)
  end

  exit
end


if __FILE__ == $0
  Application.new.run
end
