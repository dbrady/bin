#!/usr/bin/env ruby
# pom - silly pom timer for shared tmate/ssh sessions
#
# Usage:
#
# pom # 25:00
# pom <seconds>
# pom mm:ss

# BOLD
#
# Set to "bold " if the default pom font really needs boldfacing.  E.g. 'roman'
# and 'univers' really need bolding, but 'electronic' does not.
#BOLD=""
BOLD="bold"

# FONT
#
# Override default font setting, or leave blank to use rubanner's default
# FONT=""
FONT="--font='univers'"
FONT="--font='roman'"

def osx?
  `uname -s`.strip == "Darwin"
end

def file_path
  File.expand_path("~/.watch-and-say")
end

def got_watchfile?
  File.exists?(file_path)
end

def say(msg)
  # configuration management is of teh debbil. Vagrant is gone, haxxor straight
  # into
  if osx?
    system "say", msg
  else
    puts "\x1b[1;37;41mSAY IS DISABLED BECAUSE THIS IS NOT OSX\x1b[0m"
  end
  return
  # dbrady 2020-01-10: everything past here is hot garbage. Keeping it in case
  # future me ever wants to blackmail past me.
  #
  # dbrady 2017-10-18: say is broken wtf/lol
  #
  # TODO: Here's a silly brainwave - how about starting this in the primary
  # window (that has access to say) and let the muted window be the one hosting
  # code?
  #
  # dbrady 2018-01-31: DISCOVERY - it's actually tm-pom-start that has the
  # problem. Of special note is that it has a anonymous share queue, e.g. it
  # doesn't run out of /tmp/work or any other reattach/pid/name
  # thingy. Investigate! (Later.)
  #
  # hangs with no sound in bash in Terminal if running multiple tmate sessions
  # but literally the point of the CLI app is to run in a second shared window
  # and be the timer.
  #
  # Workaround: use watch-and-say. We write to shared file, essentially a disk
  # queue of messages to speak. Then run watch-and-say from one of the terminals
  # where say *does* work and boom you got messages.
  #
  # "It Just Works" -- Some Guy Who Must Be Dead Now I Guess
  #
  # Update: Actually, it looks like it might be me trying to run two tmate
  # sessions at once. In the second session, tssh and/or pbcopy do not work
  # either.
  #
  # Steve Jobs is still dead though, so eh. Win some/Lose some
  #
  # system 'say "Timer is done"'
  #
  # HACK/SOLUTION: Added watch-and-say to bin. Anything written to
  # ~/.watch-and-say will be picked up and passed to the say command. Have to
  # run watch-and-say from a terminal that DOES have working sound.
  #
  # UPDATE: change this file to be in ~/cmm/vagrant/code because then it can be
  # shared from OSX because still very lol.
  # if osx?
  #   if got_watchfile?
  #     puts "Writing message to #{file_path}"
  #     puts "  Message: #{msg}"
  #     File.open(file_path,"a") do |f|
  #       f.puts msg
  #     end
  #   end
  # end
end

# TODO: handle hours (WHY???)

# TODO: use ANSI.clear each frame so screen size doesn't matter

# ==============================================================================
# Write sensible defaults -- keep this code here until refactoring; if I ever
# need this on a new machine I'll want to rewrite these. Ponder: Maybe instead
# of putting these in ~/.poms.yml I should keep them in this file as DATA after
# an __END__ tag?
#
# known_poms = {
#   'b' => { 'alias' => 'break' },
#   'break'=> {
#     'time' => '5:00',
#     'start_message' => 'breaktime five minutes',
#     'stop_message' => 'breaktime over'
#   },
#   'pomodoro' => {
#     'time' => '25:00',
#     'start_message' => 'starting pomodoro',
#     'stop_message' => 'stopping pomodoro'
#   },
#   'pom'=>{'alias' => 'pomodoro'},
#   'p'=>{'alias' => 'pomodoro'},
# }
#
# require 'yaml'
# File.open(CONFIG_FILE, 'w') do |f|
#   f.puts known_poms.to_yaml
# end
# puts "WROTE INITIAL POM CONFIG"
# exit
# ==============================================================================

require 'yaml'
CONFIG_FILE = File.expand_path('~/.poms.yml').freeze
known_poms = if File.exists? CONFIG_FILE
               YAML.load_file CONFIG_FILE
             else
               {}
             end

require 'pp'
pp known_poms

# TODO: Refactor this whole mess
# TODO: Capture and say start_message and stop_message instead of "starting pom"
first_arg = if known_poms.keys.include? ARGV[0]
              pom = known_poms[ARGV[0]]
              alias_depth = 5
              while pom['alias']
                the_alias = pom['alias']
                alias_depth -= 1
                fail "Too many aliases; stopping at pom[:alias] => '#{the_alias}'" if alias_depth <= 0
                pom = known_poms[the_alias]
                fail "Unrecognized alias: '#{the_alias}'" unless known_poms.key? the_alias
              end
              say pom['start_message'] if pom['start_message']
              pom['time']
            else
              ARGV[0]
            end

time = case first_arg
       when /^\d*:\d\d:\d\d$/
         puts "H:MM:SS"
         h,m,s = *first_arg.split(/:/).map(&:to_i)
         h * 3600 + m * 60 + s
       when /^\d+:\d\d$/
         puts "MM:SS"
         m,s = *first_arg.split(/:/).map(&:to_i)
         m * 60 + s
       when /^\d+$/
         puts "SS"
         first_arg.to_i
       when /^\d+m$/
         puts "MM:SS"
         first_arg.to_i * 60
       # when /^b(reak)?$/
       #   puts "MM:SS"
       #   5 * 60
       # when /^eatadick$/ # TJ made me do this ;-)
       #   puts "HH:MM:SS"
       #   9 * 60 * 60
       else
         puts "DEFAULT"
         25 * 60
       end

ESC = 27.chr

# 20% of total time OR 1 minute, whichever is smaller
warning_time = [time * 0.2, 60].min

say "Starting pom"

time.downto(0).each do |seconds|
  hours = seconds / 3600
  min = seconds / 60 - (hours*60)
  sec = seconds - (min*60) - (hours*3600)
  display = if hours > 0
              "%d.%02d.%02d" % [hours, min, sec]
            else
              "%2d.%02d" % [min, sec]
            end
  bg_color = if seconds <= warning_time
               "on_yellow"
             else
               "on_blue"
             end
#  print "#{ESC}[2J#{ESC}[0;0H"
#  puts output.inspect
  system "rubanner '#{display}' #{FONT} #{BOLD} #{bg_color}"
  sleep 1
end
system "rubanner 'DONE' #{FONT} #{BOLD} white on_green"

say "Timer is done"
__END__
---
b:
  alias: break
break:
  time: '5:00'
  start_message: breaktime five minutes
  stop_message: breaktime over
pomodoro:
  time: '25:00'
  start_message: starting pomodoro
  stop_message: stopping pomodoro
pom:
  alias: :pomodoro
p:
  alias: :pomodoro
biteme:
  time: '9:00:00'
  start_message: TJ says bite me
  stop_message: TJ says stop biting me what is wrong with you I didnt mean it literally
