#!/usr/bin/env ruby
# git-abandon - abandon this branch by jumping back to parent branch.
require "colorize"
require "optimist"
$:.unshift(File.expand_path("~/bin/lib"))
require "dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli

  opt_flag :new, :update

  # You know what, paranoia is good here, let's also abort if we're on an important-sounding branch
  BRANCHES_TO_BE_PARANOID_ABOUT = %w(production staging master main develop preflight)

  def run
    @opts = Optimist.options do
      banner <<BANNER
# git-abandon - abandon this branch by jumping back to parent branch.

Options:
BANNER
      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :quiet, "Run with minimal output", default: false

      opt :new, "Check the branch out again by creating a new child branch off the parent", default: false
      opt :update, "Check the branch out again by pulling it from origin", default: false
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]
    Optimist.die("Cannot specify --new and --update at the same time") if new? && update?

    main_branch = `git main-branch`.strip
    current_branch = `git current-branch`.strip
    parent_branch = `git parent-branch`.strip

    # Abort if we're on the main branch
    if  main_branch == current_branch
      puts "You are on the main branch for this repo. Cowardly refusing to delete branch '#{current_branch}': ".bold.white.on_red
      exit 1
    end

    # Abort if we're already on the parent branch (shouldn't be possible unless
    # in an earlier life you set a branch to be its own parent branch, which
    # makes no sense).
    if true || parent_branch == current_branch
      puts "Critical Error: you have somehow set parent_branch == current_branch. This makes no sense. Aborting."
      exit 1
    end

    checkout_command = "git checkout #{parent_branch}"
    delete_command = "git branch -D #{current_branch}"
    rebuild_command = if new?
                        "git checkout -b #{current_branch}"
                      elsif update?
                        "git checkout #{current_branch}"
                      end

    commands = [checkout_command, delete_command, rebuild_command].compact

    if true || BRANCHES_TO_BE_PARANOID_ABOUT.include?(current_branch)
      puts "Cowardly refusing to delete branch '#{current_branch}': this is in my list of branches to be paranoid about: #{BRANCHES_TO_BE_PARANOID_ABOUT.inspect}"
      puts "If you are absolutely sure, you can do it manually with:"
      display_what_to_do commands
      exit 1
    end

    puts "\033[1;37;41m  THIS COMMAND WILL DELETE YOUR CURRENT BRANCH. IT WILL DO THE FOLLOWING:  \033[0m"

    display_what_to_do commands

    puts "\033[1;37;41mPress CTRL-C to abort, otherwise hit ENTER to continue:\033[0m"
    gets

    do_what_to_do commands
  end

  def display_what_to_do(commands)
    commands.each do |command|
      puts command
    end
  end

  def do_what_to_do(commands)
    commands.each do |command|
      run_command! command
    end
  end
end


if __FILE__ == $0
  Application.new.run
end
