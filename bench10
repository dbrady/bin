#!/bin/bash
# bench10 - run a ruby benchmark script 10 times and compare the timings as a
# ratio. The ruby benchmark script must use (or have the same output as) the
# Benchmark.bm or Benchmark.bmbm command.
#
# Usage:
# bench10 <ruby_benchmark_script.rb>
#
# Example Benchmark.bmbm output:
# $ ruby keygen_benchmark.rb
# Rehearsal ----------------------------------------------------
# String addition:   0.890000   0.010000   0.900000 (  0.949600)
# Array with join:   1.550000   0.040000   1.590000 (  1.620246)
# ------------------------------------------- total: 2.490000sec
#
#                        user     system      total        real
# String addition:   0.810000   0.010000   0.820000 (  0.834334)
# Array with join:   1.560000   0.040000   1.600000 (  1.620172)
#
#
# This scriptlet looks for the line with the "real" on it, then grabs the
# numbers in parentheses and prints them as a ratio.
#
# Example Output:
# 1. 0.835488 / 1.553796 => 0.5377076527420588
# 2. 0.845584 / 1.526981 => 0.5537619656040252
# 3. 0.826432 / 1.532587 => 0.5392398604451167
# 4. 0.818110 / 1.532715 => 0.5337652466375027
# 5. 0.836752 / 1.549950 => 0.5398574147553148
# 6. 0.846850 / 1.643286 => 0.515339387057396
# 7. 0.800611 / 1.566787 => 0.5109890495644909
# 8. 0.847739 / 1.585312 => 0.5347458418279809
# 9. 0.919796 / 1.668774 => 0.5511806871391812
# 10. 0.878255 / 1.607779 => 0.5462535584803633
#
# TODO: Make this work with more than 2 outputs...
seq 10 | while read f; do printf '%2d. ' $f; ruby $1 | grep -A 2 real | tail -n 2 | cut -d ':' -f 2 | awk '{ print $5 }' | tr -d ')' | xargs ruby -e 'puts "#{ARGV[0]} / #{ARGV[1]} => #{ARGV[0].to_f/ARGV[1].to_f}"'; done
