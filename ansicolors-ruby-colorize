#!/usr/bin/env ruby
# ansicolors-ruby - like my ansicolors script but print the color names
require "colorize"

colors = %i[black red green yellow blue magenta cyan white]
light_colors = colors.map {|c| "light_#{c}"}.map(&:to_sym)

# header
# format = "%-13s | %-7s %-7s %-7s %-7s %-7s %-7s %-7s %-7s %-13s %-13s %-13s %-13s %-13s %-13s %-13s %-13s"
puts 'Ruby colorize gem:'
puts '-' * 191
puts "              | Background: on_(color)"
puts "Foreground    | black  red    green  yellow blue   magentacyan   white  light_black   light_red     light_green   light_yellow  light_blue    light_magenta light_cyan    light_white"

all_colors = colors.dup + light_colors.dup

all_colors.each do |fg|
  # Print normal line
  label = fg.to_s.sub(/light_/,'')
  str = "normal".to_s.ljust(13) + " | "

  colors.each do |bg|
    str += label.ljust(7).send(fg).send("on_#{bg}") + " "
  end
  colors.each do |bg|
    str += label.ljust(13).send(fg).send("on_#{bg}") + " "
  end
  puts str

  # Print bold line
  str = fg.to_s.ljust(13) + " | "
  str = "bold".ljust(13) + " | "

  colors.each do |bg|
    str += label.ljust(7).colorize(color: fg, background: bg, mode: :bold) + " "
  end
  colors.each do |bg|
    str += label.ljust(13).colorize(color: fg, background: bg, mode: :bold) + " "
  end
  puts str

  # Print dim line
  # str = fg.to_s.ljust(13) + " | "
  # str = "dim".ljust(13) + " | "

  # colors.each do |bg|
  #   str += label.ljust(7).colorize(color: fg, background: bg, mode: :dim) + " "
  # end
  # colors.each do |bg|
  #   str += label.ljust(13).colorize(color: fg, background: bg, mode: :dim) + " "
  # end
  # puts str
end

puts '-' * 191

# Notes
puts
puts "Ruby colorize gem notes:"
puts "For the exhaustive list of colors, ask the gem directly: " + "ruby -rcolorize -e 'puts String.color_samples".colorize(mode: :bold)
puts "For mode changes like bold, dim, blink, you must use the #colorize method. str.(mode: :bold)"
puts "String#colorize is pretty forgiving, and stacks with the color methods:"


puts "str.white.colorize(mode: :bold).on_light_magenta".white.colorize(mode: :bold).on_light_magenta
puts "str.colorize(color: :white, background: :magenta, mode: :bold)".colorize(color: :white, background: :light_magenta, mode: :bold)
puts "When setting background with colorize, omit the on_ prefix. colorize(background: :green) - note :green, not :on_green"
