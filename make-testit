#!/usr/bin/env ruby
# make-testit <filename> - create/update testit command script
#
# because ruby is a better python than python

# 2024-09-30: Historical note. On the data team at Acima, circaa 2022, we had
# access to financial data, so we were in the practice of submitting every PR to
# auditors, which included a screenshot of our script running and generating
# successful output. Testit would clean up my screen, and run the script in a
# tidy format suitable for screenshotting. The problem is, the script testit ran
# changed all the time, and my project in specific was handling dozens of tiny
# PRs every day rather than one big grindy report over a week. Testit shaved a
# ten-minute task down to 2 minutes, and then this script shaved the 2 minutes
# down to zero. So this is the script that wrote the script that ran the
# script. (Why write a program when you can write a programmer?)

require "fileutils"

# BONUS: If you run testit <filename>, save the <filename> to ~/.testit, and then testit with no args can rerun that file again.

test_file = ARGV.first
module_path = test_file.gsub(%r|/|, '.').sub(/\.py$/, '')
class_name = File.readlines(test_file).grep(/^\s*class /).first.sub(/^\s*class /, '').sub(/\(.*$/,'').strip
script_file = File.expand_path("~/bin/testit")
root = '~/data_services_package/'
command = "cd #{root} && time python -m unittest #{module_path}.#{class_name}"

File.open(script_file, "w") do |fp|
  fp.puts <<SCRIPT
#!/bin/bash

# testit - run test script.
# This file was automatically created by make-testit. Do not edit. Or do; I'm not your real dad.

# rewrite the current command line so screenshots for coworkers don't have cryptic script names
echo -ne "\\033[1F# "

echo '#{command}'
#{command}
SCRIPT
end
FileUtils.chmod("u+x", script_file)

puts "Generated ~/bin/testit as:"
puts command
