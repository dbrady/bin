#!/usr/bin/env ruby
# snow-make-links-for-zack - generate all the PR links for a job's migrations
#
# IMPORTANT TODO: WRITE DOWN ALL THE LINKS WE MAKE. If Zack gets way behind and
# then has multiple feedback issues, I need to be able to find my open PRs and
# tickets. This needs to be omnidirectional, if I forget to put the jira ticket on
# the github PR or Jira can't find the PRs, I am likely to have one number and
# not the others.
#
# So if I'm on ticket 1533 and say snow link 2723 428, I need to be able to take
# any of those numbers and find the others.
#
# Look at git-set-pr and git-get-pr, I think I had part of the idea going
# there. If I run get-set-pr with no arguments it should get the ticket from the
# branch and the repo from the cwd.
require 'yaml'
require 'date'

def usage
  str = <<USAGE
#{File.basename(__FILE__)} <WAREHOUSE_PR_ID> <FINANCE_PR_ID> [<PACKAGE_PR_ID>]
#{File.basename(__FILE__)} show - show links for current branch
#{File.basename(__FILE__)} show <ticket>|last - show links for specific or most recent branch
#{File.basename(__FILE__)} show all - show links for all known branches
USAGE
end

def current_branch
  @current_branch ||= `git current-branch`.strip
end

# Given a branch like 'feature/DS-4269/etl_do_a_thing2', returns 4269
def get_ticket_from_branch
  current_branch.split(/\D+/)[1].to_i
end

# If we are doing a snowflake moveover, branch names will be of the form
# 'feature/DS-<jira>/<job><version>'. This returns the job portion.

# Clips off any leading 'feature/DS-nnnn/' portion of a branch and any trailing version number. What's left should be the job name.
def get_job_from_branch
  current_branch.sub(%r|^feature/DS-\d+/|, '').sub(%r|/?\d+$|, '')
end


HISTORY_FILENAME = File.expand_path("~/.branch-history-warehouse.yml")
# rescue is only needed on first run when the history file doesn't exist
branch_history = branch_history = YAML.load_file(HISTORY_FILENAME) rescue {}

if ARGV[0] == "show"
  if ARGV[1] == "last"
    latest_ticket = branch_history.keys.first
    latest = branch_history.values.first
    latest_date = DateTime.strptime(latest["created_at"], "%F %T")

    branch_history.each do |ticket, info|
      created_at = DateTime.strptime(info["created_at"], "%F %T")
      if created_at > latest_date
        latest_date = created_at
        latest = { ticket => info }
        latest_ticket = ticket
      end
    end
    puts({latest_ticket => latest}.to_yaml)

  elsif ARGV[1].to_i > 0
    puts({ARGV[1].to_i => branch_history[ARGV[1].to_i]}.to_yaml)
  #
  elsif ARGV[1] == "all"
    # show whole file
    puts branch_history.to_yaml

  elsif ARGV[1]
    puts branch_history.values().detect {|job| job.values.detect {|value| value.include?(ARGV[1])}}.to_yaml

  else
    # show for current branch only
    ticket_id = current_branch.split(/\D+/)[1].to_i
    puts({ticket_id => branch_history[ticket_id]}.to_yaml)

  end

  exit 0
end

if ARGV.size < 2 || ARGV.size > 3 || ARGV.include?('-h') || ARGV.include?('--help')
  puts usage
  exit -1
end

TICKET_ID=get_ticket_from_branch
WAREHOUSE_PR_ID=ARGV[0]
FINANCE_PR_ID=ARGV[1]
PACKAGE_PR_ID=ARGV[2]

JIRA_LINK = "https://acima.atlassian.net/browse/DS-#{TICKET_ID}"
WAREHOUSE_LINK = "https://github.com/acima-credit/data_services/pull/#{WAREHOUSE_PR_ID}"
FINANCE_LINK = "https://github.com/acima-credit/data_services_finance/pull/#{FINANCE_PR_ID}"
PACKAGE_LINK = "https://github.com/acima-credit/data_services_package/pull/#{PACKAGE_PR_ID}"

# update yaml
branch_history[TICKET_ID] = {
  "job" => get_job_from_branch,
  "created_at" => Time.now.strftime("%F %T"),
  "jira_link" => JIRA_LINK,
  "warehouse_link" => WAREHOUSE_LINK,
  "finance_link" => FINANCE_LINK,
}

if PACKAGE_PR_ID
  branch_history[TICKET_ID]["package_link"] = PACKAGE_LINK
end

File.open(HISTORY_FILENAME, "w") { |fp| fp.puts branch_history.to_yaml }

proposed_branch_name = current_branch.sub(%r|^feature/|,'')
job_name = proposed_branch_name.sub(%r|^\w+-\d+/|, '')

blurb =<<TEMPLATE
*DS-#{TICKET_ID}: #{job_name}*
Jira Ticket: #{JIRA_LINK}
Dataservices PR: #{WAREHOUSE_LINK}
Finance PR: #{FINANCE_LINK}
TEMPLATE

if PACKAGE_PR_ID
  blurb += "Package PR: #{PACKAGE_LINK}\n"
end

puts "Branch Name: #{proposed_branch_name}"
puts
puts blurb
puts
puts "1. Copy this to the clipboard"
puts "2. Update JIRA ticket with PR info"
puts "3. Update PRs with JIRA tickets"
puts "4. Paste this blurb to Zack (CMD-v CMD-SHIFT-f)"
