#!/usr/bin/env ruby
# csv-to-table - Print a csv file as a text table
#
# Usage:
#     csv-to-table filename.csv
#     cat filename.csv | csv-to-table
#
# Options:
#     -o, --org:              Print CSV as an org-mode table
#     -d<d>, --delimiter=<d>: Use alternate field delimiter
require "csv"
require "optimist"

opts = Optimist.options do
  opt :org, "Emit table in org-mode style"
  opt :delimiter, "Set CSV field delimiter", type: :string, default: ','
  opt :headers, "Expect table to have headers", default: true
end

# poor man's Text::Table. Pass an array of arrays.
def print_table(table, line_delimiter: '|', cell_delimiter: '|')
  # Calculate the maximum width of each column
  column_widths = table.transpose.map do |column|
    column.map { |cell| cell.to_s.length }.max
  end

  # Print the table
  table.each do |row|
    cells = row.map.with_index do |cell, index|
      cell.to_s.ljust(column_widths[index] + 2)
    end
    puts "#{line_delimiter} " + cells.join(" #{cell_delimiter} ") + " #{line_delimiter}"
  end
end

csv = ARGF.readlines.join

args = {first_row_is_head: opts[:headers]}

print_table CSV.parse(csv, headers: true, col_sep: opts[:delimiter]).to_a

# if opts[:org]
#   # sadly the text-table to_table can't deal with the headache that is emacs'
#   # org-mode. It accepts args like :horizontal_boundary and
#   # :boundary_intersection but does not distinguish between horizontal end
#   # boundaries and horizontal intersections. So text-table can do
#   # "+---+---+---+---+" or "|---|---|---|---|", but we need "|---+---+---+---|".
#   puts formatted.gsub(/^\+/, "|").gsub(/\+$/, "|")
# else
#   puts formatted
# end
