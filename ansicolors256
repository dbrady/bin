#!/usr/bin/env ruby
# ...rewriting this in ruby because a 256-iteration bash loop of expr + echo
# makes this script take almost 5 seconds to execute, yikes. If I knew how to
# concatenate a string in bash (I'm sure it can be done) it might be worth
# staying in bash, but at this point this script is very close to unreadable
# already so a rewrite in ruby will be more clean.
#
# Notes from https://misc.flogisoft.com/bash/tip_colors_and_formatting

# Set Attributes
# 1 - Bold
# 2 - Dim
# 4 - Underline
# 5 - Blink (doesn't work on some terminals, mercifully)
# 7 - Reverse (invert colors)
# 8 - Hidden (useful for passwords)

# Reset Attributes
# 0 - Reset everything
# 21 - Reset Bold/Bright
# 22 - Reset Dim
# 24 - Reset Underline
# 25 - Reset blink
# 27 - Reset inverse
# 28 - Reset hidden

# 256-color mode:
# - to set the foreground send 38;5; as a prefix to to the color
# - to set the background send 48;5; as a prefix to to the color

# In the wild I have seen 37;5 and 47;5, but I don't know how or why they work,
# or if the computer considers them different.



# 8/16 Colors

# These colors date back to the bit-twiddling days when a bit corresponded to a
# literal wire in the hardware that turned on a electron beam in the CRT. 1 was
# the red beam, 2 was the green beam, 4 was the blue beam, and 8 was the
# "intensity" or "bright" switch. (Remember that in transmissive colors, red and
# blue do not make green; instead red and green make yellow, red and blue make
# magenta, and blue and green make cyan). In 256 color palettes, the basic
# colors are shifted up by 30 and the intense colors are shifted up by 90.
#
# Adding brightness to black gives you "dark gray"; adding brightness to "light
# gray" gives you "white".

# Some old manuals call "yellow" "brown" and "bright yellow" "yellow", others
# call "light gray" "white" and "white" "bright white".

# 30 Black
# 31 Red
# 32 Green
# 33 Yellow
# 34 Blue
# 35 Magenta
# 36 Cyan
# 37 Light Gray


# ----------------------------------------------------------------------
# TODO

# The color cubes look great as color on black and white on color, but this
# inescapably means dark numbers are hard to read on black and light backgrounds
# make white numbers hard to read. I've tried emitting all four options but it
# juuuuust doesn't fit on my 54-row screen, which is about all I'm comfortable
# with on a 28" monitor with my increasingly presbyopic eyeballs.grayscale

# ----------------------------------------------------------------------


ESC=0x1b

def colorize_fg(text, color, bg=nil, bold: false)
  bold_code = bold ? "1;" : ""
  bg &&= ";48;5;#{bg}"

  "%c[#{bold_code}38;5;#{color}#{bg}m#{text}%c[0m" % [ESC, ESC]
end

def colorize_bg(text, color, fg=nil, bold: false)
  bold_code = $use_bold ? "1;" : "" # LOL it's 2020 and I'm still using ternary ops
  fg &&= "38;5;#{fg};"

  "%c[#{bold_code}#{fg}48;5;#{color}m#{text}%c[0m" % [ESC, ESC]
end

def print_16x16_table
  puts '\\x1b[38;5;<color>m sets foreground color...                         %c[30;48;5;7m\\x1b[48;5;<color>m sets background                              %c[0m' % [ESC, ESC]
  (1..16).each do |row|
    (0..15).each do |col|
      color = col*16 + row - 1
      label = sprintf "%3d ", color
      print colorize_fg(label, color)
    end
    print "    "
    (0..15).each do |col|
      color = col*16 + row - 1
      label = sprintf "%3d ", color
      print colorize_bg(label, color)
    end
    puts
  end
 end

# ----------------------------------------------------------------------
# Print 1 bar each of basic 16 colors in 4-bit and 8-bit mode
# Bar 1: 0-15 fg on black <space> 0-15 fg on white
# Bar 2: 0-15 white on bg <space> 0-15 black on bg
# ----------------------------------------------------------------------
def print_16_colorbars(reference_color: nil, bold: false)
  puts "Colors 0-15 are identical to the 4-bit colors (see ansicolors script for details)."
  16.times do |color|
    label = sprintf "%3d ", color
    print colorize_fg(label, color, reference_color || 0, bold: bold)
  end
  print "    "
  16.times do |color|
    label = sprintf "%3d ", color
    print colorize_fg(label, color, reference_color || 7, bold: bold)
  end
  puts
  16.times do |color|
    label = sprintf "%3d ", color
    print colorize_bg(label, color, reference_color || 7, bold: bold)
  end
  print "    "
  16.times do |color|
    label = sprintf "%3d ", color
    print colorize_bg(label, color, reference_color || 0, bold: bold)
  end
  puts
end

def print_color_cube_panels(reference_color: nil, bold: false)
  puts "Colors 16-231 form a 6x6x6 color cube of black -> r/g/b -> c/m/y -> white. (color = 16 + r*36 + g*6 + b, where r,g,b -> (0..5) )"
  # If no reference_color, print each color on lightest_gray then on darkest_gray
  fgs = bgs = reference_color ? [reference_color] : [255, 232]
  bgs.each do |bg|
    (1..6).each do |row|
      (0..35).each do |col|
        color = 16 + col*6 + row - 1
        label = sprintf "%3d ", color
        print colorize_fg(label, color, bg, bold: bold)
        print " " if col % 6 == 5
      end
      puts
    end
  end

  # If no reference_color, print lightest_gray then darkest_gray on each color
  fgs.each do |fg|
    (1..6).each do |row| # color cubes: black (16) on color
      (0..35).each do |col|
        color = 16 + col*6 + row - 1
        label = sprintf "%3d ", color
        print colorize_bg(label, color, fg, bold: bold)
        print " " if col % 6 == 5
      end
      puts
    end
  end
end

def print_grayscale_bars(reference_color: nil, bold: false)
  puts "Colors 232-255 are an extended 24-shade grayscale palette (232 and 255 are grays, not black and white)."

  fgs = bgs = if reference_color
                [{title: "#{reference_color}", color: reference_color}]
              else
                [{title: "Black", color: 16},{title: "White", color: 231}]
              end
  bgs.each do |bg|
    (232..255).each do |color|
      label = sprintf "%3d ", color
      print colorize_fg(label, color, bg[:color], bold: bold)
    end
    puts
  end
  fgs.each do |fg|
    (232..255).each do |color|
      label = sprintf "%3d ", color
      print colorize_bg(label, color, fg[:color], bold: bold)
    end
    puts
  end
end

def print_256_color_table(reference_color: nil, bold: false)
  print_16_colorbars(reference_color: reference_color, bold: bold)
  puts
  print_color_cube_panels(reference_color: reference_color, bold: bold)
  puts
  print_grayscale_bars(reference_color: reference_color, bold: bold)
end


def print_instructions
  puts "Usage / Examples:"
  puts 'Use ESC[38;5;<color>m to tell bash the color is a 256-color foreground.'
  puts 'Use ESC[48;5;<color>m to tell bash the color is a 256-color background.'
  puts "Use  ESC[38;5;<fg>;48;5;<bg>m for both. Note: Order matters; foreground must come first."


  puts 'In bash you can use \x1b or \033 to send an ESC code.'
  puts 'echo requires the (undocumented) -e flag to print extended color characters'
  puts
  puts 'Other prefixes: 1 - bold, 2 - dim, 4 - underline'
  puts
  puts 'Example: print a bold orange (color) on a white background:'
  puts 'echo -e "\x1b[1;38;5;208;48;5;255m(color)\x1b[0m"'
  puts '%c[1;38;5;208;48;5;255m(color)%c[0m' % [ESC, ESC]
end

def print_table_and_instructions(reference_color: nil, bold: false)
  print_256_color_table(reference_color: reference_color, bold: bold)
  puts
  print_instructions
end

def print_old_style_table
  print_16x16_table
end

if __FILE__==$0
  bold = ARGV.include?('-b')
  reference_color = if ARGV.include?('-c')
                      ARGV[ARGV.index('-c')+1].to_i
                    end

  puts "bold: #{bold.inspect}"
  puts "reference_color: #{reference_color}"
  if ARGV.include?('-o') || ARGV.include?('--old')
    print_old_style_table
  else
    print_table_and_instructions(reference_color: reference_color, bold: bold)
  end
end
