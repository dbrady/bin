#!/usr/bin/env ruby
# git-nuke-and-start-over - throw away current branch and re-cut it from master to start over
require "colorize"
require "optimist"
String.disable_colorization unless $stdout.tty?

class Application
  attr_reader :opts

  def debug?
    opts[:debug]
  end

  def pretend?
    opts[:pretend]
  end

  def branch_exists?(branch)
    branches = `git branch -a`.each_line.map(&:strip).grep_v(%r{^remotes/})
    branches.include?(branch)
  end

  def git_isclean?
    system "git isclean"
  end

  def run_command(command)
    puts command.cyan
    unless pretend?
      system(command).tap do |success|
        raise "run_command failed: #{command}" unless success
      end
    end
  end

  def run
    main_branch = `git main-branch`.strip
    current_branch = `git current-branch`.strip

    @opts = Optimist.options do
      opt :debug, "Print extra debug info", default: false
      opt :branch, "Rebuild from this branch", default: main_branch
      opt :backup, "Make backup of this branch", default: true
      opt :pretend, "Show the commands but do not run them", default: false
      opt :pull, "Perform git pull on source branch before rebuilding from it", default: true
    end
    puts opts.inspect if opts[:debug]

    if opts[:branch_given] && !branch_exists?(opts[:branch])
      raise "Cowardly refusing to proceed, you have asked to restart from a branch '#{opts[:branch]}' that does not exist."
    end

    puts "git nuke-and-start-over".bold.white.on_red
    puts "This will DELETE your current branch and restart it from #{opts[:branch]}".bold.white.on_red

    raise "Cowardly refusing to nuke your branch: you have unstaged changes." unless git_isclean?

    if opts[:backup]
      backup_number = 0
      backup_branch = "backup.#{current_branch}"
      if branch_exists?(backup_branch)
        raise "Backup branch '#{backup_branch}' already exists. Cowardly refusing to nuke and proceed. Use --no-backup if you're really really sure and/or possessed of a catastrophic appetite for self-destruction."
      end

      run_command "git branch #{backup_branch}"
    end

    run_command "go #{opts[:branch]}"
    run_command "git branch -D #{current_branch}"
    run_command "git pull" if opts[:pull]
    run_command "git branch #{current_branch}"
    run_command "go #{current_branch}"


  end

end


if __FILE__ == $0
  Application.new.run
end
