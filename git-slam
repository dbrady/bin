#!/usr/bin/env ruby
# git-slam - take a branch from "ready to review" through to "here's your PR"
#
#
require "colorize"
require "optimist"
require_relative "bin/dbrady_cli"
String.disable_colorization unless $stdout.tty?

class Application
  include DbradyCli

  opt_flag :auto, :details, :rubocop, :specs, :summary

  def run
    @opts = Optimist.options do
      banner <<BANNER
  git isclean                       to ensure there are no outstanding changes
  git-rubocop                       to run rubocop on files-changed
  git-cram                          to push the branch up with --set-origin
  mp-make-github-pr-text | pbcopy   to put the PR template in your clipboard
  git-create-pr                     to open the PR creation page
  git-set-pr <pr>                   to record the PR number after creation
  @robby assign <pr>                to get reviewers assigned

  To start up the automatic portion, run:

  git isclean && git rubocop && git cram && mp-make-github-pr-text | pbcopy && git create-pr

  You can do this automatically with

  git slam --auto --specs

  #{"You will still need to run git set-pr (TODO: pause for input to collect it, and/or write git-input-pr?)".yellow}


Options:
BANNER
      opt :auto, "Autorun as much as possible", default: false
      opt :specs, "Include spec run command in 'How to Test' section", default: false
      opt :debug, "Print extra debug info", default: false
      opt :pretend, "Print commands but do not run them", default: false
      opt :verbose, "Run with verbose output (overrides --quiet)", default: false
      opt :quiet, "Run with minimal output", default: false
      opt :rubocop, "Run git rubocop and abort if offenses detected", default: true
      opt :details, "Include details section (--no-details to remove section)", default: true

      opt :summary, "Summary of changes", type: :string
    end
    opts[:quiet] = !opts[:verbose] if opts[:verbose_given]
    puts opts.inspect if opts[:debug]

    Optimist.die "Training wheels: for now, please explicitly specify --specs or --no-specs to embed or suppress the rspec command in the How To Test section" unless opts[:specs_given]

    # APP CODE GOES HERE
    if auto?
      unless run_command("git isclean")
        puts "You have outstanding changes. Please commit or stash them before proceeding.".red
        exit 1
      end

      commands = [
        "git rubocop",
        "git cram",
        "mp-make-github-pr-text #{flags} | pbcopy",
        "git create-pr",
      ]

      commands.reject! {|command| command == "git rubocop" } unless rubocop?
      commands.each do |command|
        # use run_command! to abort the command chain on failure
        run_command! command
      end
      puts "Don't forget to run git set-pr!".yellow
      puts "Don't forget to update slorks: slorks review --ticket=x --board=board --pr=n".yellow
    else
      system "git-slam --help" unless opts[:help_given]
    end
  end

  def flags
    [spec_flag, summary_flag, details_flag].join(" ")
  end

  def spec_flag
    specs? ? "--specs" : "--no-specs"
  end

  def summary_flag
    summary? ? %(--summary="#{opts[:summary]}") : ""
  end

  def details_flag
    details? ? "" : "--no-details"
  end
end


if __FILE__ == $0
  Application.new.run
end
