#!/usr/bin/env ruby
# tdata-start - hack to workaround my crippled tshare-start script

require_relative 'tmuxinatrix/tmux_settings'
require_relative 'tmuxinatrix/tmuxinatrix'

settingses = [
  # first session of the day needs to start the container
  #
  # TODO: Can't do dsstart && sleep 10 && emacs because emacs needs to
  # be sent into the guest OS and dsstart will block. BUT... this is
  # pure ruby. Could we cleanly make this thing dsstart, then sleep
  # *in ruby*, then send emacs C-m ? Maybe change the final arg from
  # String to array of strings... or perhaps a lambda? Idk.
  TmuxSettings.new(name: "ds.emacs", folder: "data_services/etl/warehouse/", commands: ["dsstart", "emacs"]),

  # all subsequent sessions connect with dsexec, but we need to give dsstart enough time to fire up
  TmuxSettings.new(name: "ds.bash", folder: "data_services/etl/warehouse/", commands: ["sleep 10", "dsexec"]),
  TmuxSettings.new(name: "ds.bash2", folder: "data_services/etl/warehouse/", commands: ["sleep 10", "dsexec"]),

  TmuxSettings.new(name: "osx.emacs", folder: "data_services/etl/warehouse/", commands: ["emacs"]),
  TmuxSettings.new(name: "osx.bash", folder: "data_services/etl/warehouse/"),
  TmuxSettings.new(name: "ds-watch", folder: "data_services/etl/warehouse/", commands: ["sleep 10", "dsexec", "ds-watch-branches"]),
]
$logging = true

Tmuxinatrix.run('data', settingses)
